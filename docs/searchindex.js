Search.setIndex({"docnames": ["content/examples/communication_qkd", "content/examples/portfolio_optimization", "content/examples/variational_classifier", "content/instructions/installation", "content/packages/packages/tno.quantum.communication.qkd_key_rate/classical/cascade", "content/packages/packages/tno.quantum.communication.qkd_key_rate/classical/main", "content/packages/packages/tno.quantum.communication.qkd_key_rate/classical/privacy_amplification", "content/packages/packages/tno.quantum.communication.qkd_key_rate/classical/winnow", "content/packages/packages/tno.quantum.communication.qkd_key_rate/main", "content/packages/packages/tno.quantum.communication.qkd_key_rate/quantum/bb84", "content/packages/packages/tno.quantum.communication.qkd_key_rate/quantum/bb84_single_photon", "content/packages/packages/tno.quantum.communication.qkd_key_rate/quantum/bbm92", "content/packages/packages/tno.quantum.communication.qkd_key_rate/quantum/main", "content/packages/packages/tno.quantum.ml/classifiers.vc/main", "content/packages/packages/tno.quantum.ml/classifiers.vc/models/expected_value_model", "content/packages/packages/tno.quantum.ml/classifiers.vc/models/main", "content/packages/packages/tno.quantum.ml/classifiers.vc/models/probability_model", "content/packages/packages/tno.quantum.ml/datasets/main", "content/packages/packages/tno.quantum.ml/main", "content/packages/packages/tno.quantum.optimization.qubo/components/main", "content/packages/packages/tno.quantum.optimization.qubo/main", "content/packages/packages/tno.quantum.optimization.qubo/postprocessors/main", "content/packages/packages/tno.quantum.optimization.qubo/preprocessors/main", "content/packages/packages/tno.quantum.optimization.qubo/solvers/main", "content/packages/packages/tno.quantum.utils/main", "content/packages/packages/tno.quantum.utils/serialization", "content/packages/packages/tno.quantum.utils/validation", "content/problems/packages/tno.quantum.problems.portfolio_optimization/main", "home", "index", "navigation"], "filenames": ["content\\examples\\communication_qkd.rst", "content\\examples\\portfolio_optimization.rst", "content\\examples\\variational_classifier.rst", "content\\instructions\\installation.rst", "content\\packages\\packages\\tno.quantum.communication.qkd_key_rate\\classical\\cascade.rst", "content\\packages\\packages\\tno.quantum.communication.qkd_key_rate\\classical\\main.rst", "content\\packages\\packages\\tno.quantum.communication.qkd_key_rate\\classical\\privacy_amplification.rst", "content\\packages\\packages\\tno.quantum.communication.qkd_key_rate\\classical\\winnow.rst", "content\\packages\\packages\\tno.quantum.communication.qkd_key_rate\\main.rst", "content\\packages\\packages\\tno.quantum.communication.qkd_key_rate\\quantum\\bb84.rst", "content\\packages\\packages\\tno.quantum.communication.qkd_key_rate\\quantum\\bb84_single_photon.rst", "content\\packages\\packages\\tno.quantum.communication.qkd_key_rate\\quantum\\bbm92.rst", "content\\packages\\packages\\tno.quantum.communication.qkd_key_rate\\quantum\\main.rst", "content\\packages\\packages\\tno.quantum.ml\\classifiers.vc\\main.rst", "content\\packages\\packages\\tno.quantum.ml\\classifiers.vc\\models\\expected_value_model.rst", "content\\packages\\packages\\tno.quantum.ml\\classifiers.vc\\models\\main.rst", "content\\packages\\packages\\tno.quantum.ml\\classifiers.vc\\models\\probability_model.rst", "content\\packages\\packages\\tno.quantum.ml\\datasets\\main.rst", "content\\packages\\packages\\tno.quantum.ml\\main.rst", "content\\packages\\packages\\tno.quantum.optimization.qubo\\components\\main.rst", "content\\packages\\packages\\tno.quantum.optimization.qubo\\main.rst", "content\\packages\\packages\\tno.quantum.optimization.qubo\\postprocessors\\main.rst", "content\\packages\\packages\\tno.quantum.optimization.qubo\\preprocessors\\main.rst", "content\\packages\\packages\\tno.quantum.optimization.qubo\\solvers\\main.rst", "content\\packages\\packages\\tno.quantum.utils\\main.rst", "content\\packages\\packages\\tno.quantum.utils\\serialization.rst", "content\\packages\\packages\\tno.quantum.utils\\validation.rst", "content\\problems\\packages\\tno.quantum.problems.portfolio_optimization\\main.rst", "home.rst", "index.rst", "navigation.rst"], "titles": ["QKD key-rate", "Portfolio optimization", "Variational classifier", "Installation", "communication.qkd_key_rate.classical.cascade", "communication.qkd_key_rate.classical", "communication.qkd_key_rate.classical.privacy_amplification", "communication.qkd_key_rate.classical.winnow", "communication.qkd_key_rate", "communication.qkd_key_rate.quantum.bb84", "communication.qkd_key_rate.quantum.bb84_single_photon", "communication.qkd_key_rate.quantum.bbm92", "communication.qkd_key_rate.quantum", "ml.classifiers.vc", "ml.classifiers.vc.models.expected_value_model", "ml.classifiers.vc.models", "ml.classifiers.vc.models.probability_model", "ml.datasets", "ml", "optimization.qubo.components", "optimization.qubo", "optimization.qubo.postprocessors", "optimization.qubo.preprocessors", "optimization.qubo.solvers", "utils", "utils.serialization", "utils.validation", "problems.portfolio_optimization", "About TNO", "TNO Quantum", "&lt;no title&gt;"], "terms": {"thi": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "page": [0, 1, 2, 3], "contain": [0, 1, 2, 4, 5, 7, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "advanc": [0, 1, 2], "tno": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "quantum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], "commun": [0, 28, 29], "qkd_key_rat": 0, "packag": [0, 1, 2, 3, 8, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29], "basic": [0, 1, 2, 19, 23], "usag": [0, 1, 2, 4, 5, 6, 7, 8, 12, 17, 28, 29], "can": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "found": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 19, 22, 23, 24, 25, 28, 29], "modul": [0, 1, 2, 5, 6, 8, 9, 10, 13, 14, 15, 16, 19, 20, 24, 25, 26], "document": [0, 1, 2, 21, 23, 24, 27], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "provid": [0, 1, 2, 3, 5, 8, 12, 13, 20, 22, 23, 24, 25, 26, 27, 29], "python": [0, 3, 8, 26, 27], "code": [0, 1, 3, 5, 7, 8, 9, 10, 27, 28, 29], "comput": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 19, 20, 23, 24, 27, 28, 29], "optim": [0, 2, 3, 8, 9, 10, 11, 12, 13, 16, 24, 27, 28, 29], "protocol": [0, 4, 5, 7, 8, 9, 10, 11, 12], "paramet": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27], "differ": [0, 1, 2, 4, 5, 8, 11, 13, 16, 19, 20, 27], "distribut": [0, 4, 8, 9, 11, 12, 17, 23], "instal": [0, 1, 2, 13, 19, 20, 23, 24], "follow": [0, 1, 2, 3, 4, 5, 8, 12, 13, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29], "depend": [0, 1, 2, 4, 9, 11, 12, 16, 19, 20, 23, 24], "run": [0, 1, 2, 3, 13, 27], "below": [0, 1, 2, 11, 15, 27], "pip": [0, 1, 2, 3, 20, 23], "2": [0, 1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 27, 28, 29], "0": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "matplotlib": [0, 1, 2, 19, 20, 23, 27], "tqdm": [0, 2], "1": [0, 1, 2, 5, 7, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "secur": [0, 5, 6, 8, 9, 11, 28, 29], "variou": [0, 12], "bb84": [0, 8, 10, 11, 12], "function": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 28, 29], "loss": [0, 2, 6, 9, 10, 11, 12, 13, 23], "show": [0, 1, 2, 19, 20, 21, 22, 23, 27], "how": [0, 1, 2, 11, 13, 15, 19, 20, 21, 22, 23, 27, 28, 29], "plot": [0, 1, 2, 19, 20, 23, 27], "versu": 0, "attenu": [0, 9, 10, 11, 12], "import": [0, 1, 2, 4, 6, 7, 9, 10, 11, 12, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 27], "pyplot": [0, 1, 2, 27], "plt": [0, 1, 2, 27], "numpi": [0, 1, 2, 19, 20, 24, 25, 27], "np": [0, 1, 2, 12, 25, 27], "from": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27], "bb84asymptotickeyrateestim": [0, 9], "bb84finitekeyrateestim": [0, 9], "bb84fullyasymptotickeyrateestim": [0, 9], "bb84_single_photon": [0, 8, 12], "bb84singleasymptotickeyrateestim": [0, 10], "standard_detector": [0, 9, 10, 11, 12], "keyrat": [0, 12], "creat": [0, 1, 5, 7, 11, 12, 13, 17, 19, 20, 22, 23, 24, 25, 27], "custom": [0, 23, 24], "detector": [0, 9, 10, 11, 12], "customis": [0, 9, 10, 11, 12], "dark_count_r": [0, 9, 10, 11, 12], "6e": 0, "7": [0, 19, 20, 21, 22, 23, 24, 27], "polarization_drift": [0, 9, 10, 11, 12], "0707": 0, "error_detector": [0, 9, 10, 11, 12], "5e": 0, "3": [0, 1, 2, 3, 9, 13, 15, 17, 19, 20, 21, 22, 23, 25, 27], "efficiency_detector": [0, 12], "distanc": [0, 5], "arang": [0, 2], "40": [0, 17, 27], "attenuation_factor": 0, "fig": [0, 1, 2, 27], "ax1": [0, 1, 2, 27], "ax2": [0, 1, 2, 27], "subplot": [0, 1, 2, 27], "figsiz": [0, 1, 2, 27], "16": [0, 1, 2, 27], "8": [0, 2, 4, 9, 10, 11, 17, 19, 20, 21, 22, 23], "dict": [0, 1, 9, 10, 11, 12, 13, 19, 20, 21, 23, 24, 25, 26, 27], "str": [0, 1, 4, 5, 7, 9, 10, 11, 12, 13, 19, 20, 21, 23, 24, 25, 26, 27], "fulli": [0, 9, 28, 29], "asymptot": [0, 9, 10, 11], "number_of_decoi": [0, 9], "singl": [0, 4, 5, 8, 9, 10, 12, 19, 20, 24], "photon": [0, 8, 9, 10, 11, 12], "finit": [0, 9, 11], "number_of_puls": [0, 9, 11], "1e12": 0, "label": [0, 1, 2, 12, 19, 20, 27], "item": [0, 2, 5, 24], "key_rat": [0, 5], "intens": [0, 9, 10, 11, 12, 27], "att": 0, "desc": [0, 2], "f": [0, 2, 9, 10, 11, 16, 17, 25], "process": [0, 2, 5, 7, 9, 16, 19, 20], "x": [0, 1, 6, 9, 10, 11, 13, 14, 15, 16, 17, 19, 20, 23, 24, 25, 26, 27], "optimize_r": [0, 9, 10, 11, 12], "append": [0, 1, 2], "mu": [0, 9, 10, 11, 12], "semilogi": 0, "axi": [0, 2, 19], "set_xlabel": [0, 2], "db": [0, 9, 10, 11, 12], "fontsiz": 0, "14": [0, 27], "set_ylabel": [0, 2], "set_titl": [0, 1, 2, 27], "legend": [0, 2, 27], "laser": [0, 9, 10, 12], "set": [0, 1, 2, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 22, 23, 27], "suptitl": 0, "100": [0, 1, 6, 12, 16, 17, 23], "00": [0, 27], "01": [0, 9], "30": [0, 27], "07it": 0, "": [0, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 22, 23, 25, 27], "23": 0, "72it": 0, "42": [0, 4, 7, 17, 24, 27], "25it": 0, "12": [0, 1, 27], "27": 0, "18": 0, "68": [0, 27], "number": [0, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27], "puls": [0, 6, 9, 10, 11, 12], "finitekeyr": 0, "estim": [0, 2, 4, 5, 6, 9, 10, 11, 12, 13, 27], "ax": [0, 1, 2, 19, 23, 26, 27], "power_number_of_puls": 0, "9": [0, 3, 9, 10, 19, 20, 21, 22, 23], "10": [0, 1, 2, 5, 6, 8, 9, 10, 11, 16, 17, 19, 20, 22, 27], "power": 0, "rf": 0, "n": [0, 11, 16, 17, 19, 20, 23, 27], "try": 0, "_": [0, 1, 2, 16], "except": [0, 15], "break": 0, "len": 0, "problem": [1, 9, 19, 20, 22, 23], "portfolio_optim": 1, "convert": [1, 5, 15, 16, 19, 20, 24, 26, 27], "multi": [1, 27], "object": [1, 4, 5, 6, 7, 12, 13, 19, 20, 22, 23, 24, 25, 26, 27], "qubo": [1, 3, 27], "transform": [1, 2, 13, 14, 16, 19, 20, 27], "solv": [1, 9, 19, 20, 22, 23, 27], "us": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 27, 28], "anneal": [1, 19, 20, 23, 27], "techniqu": [1, 4, 27], "demonstr": [1, 2, 28, 29], "solver": [1, 3, 9, 19, 20, 21, 27], "solverconfig": [1, 19, 20, 23, 27], "portfoliooptim": [1, 27], "plot_point": [1, 27], "up": [1, 27], "penalti": [1, 27], "coeffici": [1, 9, 19, 20, 27], "constraint": [1, 19, 20, 27], "lambdas1": [1, 27], "logspac": [1, 27], "25": [1, 17, 19, 27], "endpoint": [1, 27], "fals": [1, 2, 5, 13, 19, 20, 22, 23, 24, 26, 27], "base": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29], "lambdas2": [1, 27], "lambdas3": [1, 27], "arrai": [1, 9, 10, 11, 19, 20, 24, 25, 26, 27], "benchmark_dataset": [1, 27], "add_minimize_hhi": [1, 27], "weight": [1, 14, 15, 16, 19, 20, 27], "add_maximize_roc": [1, 27], "formul": [1, 27], "weights_roc": [1, 27], "add_emission_constraint": [1, 27], "emission_now": [1, 27], "emis_intens_now": [1, 27], "emission_futur": [1, 27], "emis_intens_futur": [1, 27], "name": [1, 2, 3, 4, 5, 7, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 26, 27], "emiss": [1, 27], "defin": [1, 2, 5, 12, 15, 16, 19, 20, 25, 27], "configur": [1, 13, 14, 15, 16, 19, 20, 23, 24, 27], "solver_configur": 1, "simul": [1, 13, 19, 20, 23, 27], "simulated_annealing_solv": [1, 19, 20, 23, 27], "option": [1, 2, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 24, 25, 26, 27], "num_read": [1, 21, 23, 27], "num_sweep": [1, 23, 27], "200": [1, 17, 27], "random": [1, 5, 9, 11, 13, 14, 15, 16, 17, 19, 21, 23], "sampler": [1, 21, 23, 27], "random_sampler_solv": [1, 19, 20, 23], "d_wave_clique_sampler_solv": [1, 19, 20, 23], "annealing_tim": 1, "experi": 1, "experiment_data": 1, "solver_config": [1, 23, 27], "valu": [1, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 23, 24, 25, 26, 27], "result": [1, 7, 9, 11, 13, 19, 20, 21, 23, 26, 27], "verbos": [1, 13, 22, 23, 27], "results_df": 1, "y": [1, 13, 24, 25, 27], "z": [1, 9, 11], "diff": [1, 27], "diversif": [1, 27], "roc": [1, 27], "data": [1, 4, 7, 13, 14, 16, 17, 19, 20, 24, 25], "ncol": [1, 27], "5": [1, 2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27], "ax3": 1, "i": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "solver_label": 1, "enumer": [1, 2], "zip": 1, "scatter_plot": 1, "c": [1, 2, 27], "cmap": [1, 2, 27], "viridi": 1, "vmin": [1, 27], "35": 1, "vmax": [1, 27], "set_xlim": 1, "15": [1, 5, 7, 23, 27], "set_ylim": [1, 2], "cbar": 1, "colorbar": 1, "orient": 1, "horizont": 1, "addition": [1, 12, 27], "we": [1, 4, 5, 6, 9, 10, 11, 12, 19, 20, 27, 28, 29], "make": [1, 2, 4, 13, 19, 21, 23, 25, 26, 28, 29], "boxplot": 1, "kei": [1, 4, 5, 6, 8, 9, 10, 11, 12, 13, 19, 20, 23, 24, 26, 27], "tick_label": 1, "ylabel": 1, "titl": 1, "box": 1, "tight_layout": [1, 27], "20": [1, 5, 17, 19, 27], "instanc": [1, 3, 9, 10, 12, 15, 19, 20, 23, 24, 25, 26, 27], "portfolio_data": [1, 27], "k": [1, 2, 27], "without": [1, 12, 20, 23, 25, 27, 28, 29], "results_no_constraint": 1, "results_no_constraint_df": 1, "outstanding_now": [1, 27], "get_outstanding_now": [1, 27], "total_outstanding_now": 1, "sum": [1, 2, 7, 9, 11, 19, 20, 27], "emission_intensity_now": 1, "get_column": [1, 27], "emission_intensity_futur": 1, "def": [1, 2, 24, 25], "calculate_diff_emiss": 1, "outstanding_futur": 1, "calcul": [1, 4, 5, 7, 8, 11, 12, 19, 20, 27], "manual": 1, "total_outstanding_futur": 1, "total_relative_emission_now": 1, "total_relative_emission_futur": 1, "return": [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27], "outstand": [1, 27], "amount": [1, 6, 7, 27], "appli": [1, 4, 5, 8, 14, 16, 19, 20, 22, 24, 28, 29], "x1": [1, 27], "y1": [1, 27], "z1": 1, "results_constraint": 1, "results_constraint_df": 1, "x2": [1, 27], "y2": [1, 27], "z2": 1, "scatter_plot1": 1, "scatter_plot2": 1, "unconstrain": [1, 19, 20], "constrain": [1, 19, 20], "ml": 2, "vc": [2, 18], "variationalclassifi": [2, 13, 15], "which": [2, 4, 5, 9, 10, 11, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 25, 27, 28, 29], "ha": [2, 5, 13, 19, 20, 21, 23, 24, 25, 26, 27], "been": [2, 23, 27], "implement": [2, 11, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25], "accord": [2, 16], "scikit": [2, 13], "learn": [2, 13, 18, 28, 29], "api": [2, 13], "mean": [2, 12, 13], "ani": [2, 9, 10, 11, 12, 13, 19, 20, 21, 23, 24, 25, 26, 27], "other": [2, 5, 7, 9, 10, 11, 13, 18, 19, 20, 23, 24, 25, 27], "binari": [2, 5, 13, 19, 20, 24, 26, 27], "multiclass": [2, 13], "combin": [2, 4, 5, 9, 11, 13, 16, 23], "through": [2, 13, 23, 28, 29], "pipelin": [2, 13, 20, 23], "In": [2, 4, 5, 7, 9, 13, 22, 24, 27], "addit": [2, 9, 13, 19, 21, 23, 24], "pytorch": [2, 13, 24], "tensor": [2, 13], "via": [2, 19, 20, 25, 27], "sklearn": [2, 13, 17], "color": [2, 27], "listedcolormap": 2, "inspect": 2, "decisionboundarydisplai": 2, "neighbor": [2, 23], "kneighborsclassifi": 2, "make_pipelin": 2, "preprocess": [2, 14, 15, 16, 19, 22, 23], "standardscal": 2, "svm": 2, "svc": 2, "tree": [2, 23], "decisiontreeclassifi": 2, "dataset": [2, 13, 15, 18], "get_iris_dataset": [2, 13, 15, 17], "x_train": [2, 13, 15, 17], "y_train": [2, 13, 15, 17], "x_valid": [2, 13, 15, 17], "y_valid": [2, 13, 15, 17], "n_featur": [2, 13, 14, 15, 16, 17], "n_class": [2, 13, 14, 15, 16, 17], "random_se": [2, 13, 15, 17], "batch_siz": [2, 13], "backend": [2, 14, 15, 16, 19, 23, 24], "default": [2, 5, 9, 10, 11, 12, 13, 17, 19, 20, 21, 23, 24, 25, 26, 27], "qubit": [2, 13, 14, 16, 19, 20, 23, 24], "model": [2, 13, 19, 20], "expected_value_model": [2, 15], "n_layer": [2, 13, 14, 15, 16], "n_trainable_sublay": [2, 13, 14, 15, 16], "scale": [2, 13, 14, 15, 16, 27], "adam": [2, 24], "use_bia": [2, 13], "random_init": [2, 13], "true": [2, 5, 13, 19, 20, 22, 23, 24, 26, 27], "warm_init": [2, 13], "random_st": [2, 4, 5, 7, 13, 14, 15, 16, 21, 23, 27], "nearest": 2, "linear": [2, 9, 19], "kernel": 2, "025": 2, "decis": 2, "max_depth": 2, "ff0000": 2, "0000ff": 2, "figur": [2, 19, 20, 23, 27], "fit": [2, 13, 15], "variationalclassifier__n_it": 2, "150": 2, "els": 2, "from_estim": 2, "cm": 2, "rdbu": 2, "alpha": [2, 23, 27], "ep": 2, "grid_resolut": 2, "50": [2, 21, 23], "scatter": [2, 27], "edgecolor": 2, "4": [2, 9, 12, 15, 17, 19, 20, 21, 22, 23, 24, 25, 27], "score": [2, 13], "text": [2, 12, 19, 20], "get_xlim": 2, "get_ylim": 2, "size": [2, 4, 5, 9, 13, 19, 20, 22, 23, 24, 26], "sepal": 2, "length": [2, 5, 6, 12, 17, 19, 20, 23, 24, 27], "width": 2, "post": [2, 9, 16, 20, 28, 29], "showcas": [2, 13], "type": [2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27], "ndarrai": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 23, 24, 25, 26, 27], "get_wine_dataset": [2, 13, 17], "load": [2, 17, 27], "wine": [2, 17], "_std_scale": 2, "float64": [2, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 23, 25, 27], "std_scale": 2, "_accuraci": 2, "predict": [2, 13, 15], "isclos": 2, "linalg": [2, 19, 20], "norm": 2, "ord": 2, "none": [2, 4, 5, 7, 9, 10, 11, 12, 13, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27], "perform": [2, 4, 7, 9, 10, 11, 13, 19, 22, 23, 25, 26, 27], "classif": [2, 14, 15, 16, 18], "model_nam": 2, "modulo_model": [2, 13, 15], "parity_model": 2, "max_iter": [2, 19, 20, 23], "iter": [2, 5, 7, 13, 19, 22, 23, 24], "accuracy_valid": 2, "accuracy_train": 2, "n_iter": [2, 13], "pred_valid": 2, "pred_train": 2, "marker": [2, 27], "o": [2, 19, 20, 23], "train": [2, 13, 17, 23], "accuraci": 2, "valid": [2, 5, 17, 19, 20, 23, 24], "our": [3, 5, 11, 22, 28, 29], "requir": [3, 4, 5, 7, 12, 19, 20, 23, 25, 26, 27], "ar": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29], "avail": [3, 4, 5, 7, 15, 19, 20, 21, 22, 23], "pypi": [3, 28, 29], "each": [3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 16, 17, 19, 23, 24, 25, 26, 27], "For": [3, 4, 5, 9, 11, 16, 23, 24, 25, 27], "sourc": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27], "github": [3, 28, 29], "some": [3, 5, 13, 17, 19, 27], "have": [3, 4, 5, 6, 7, 9, 10, 11, 17, 19, 20, 23, 26], "exampl": [3, 4, 5, 6, 7, 8, 12, 13, 15, 17, 19, 20, 24, 25], "flag": [3, 19, 23], "dwave": [3, 20, 23], "qubovert": [3, 20, 23], "qaoa": [3, 20, 23], "To": [3, 5, 11, 23], "all": [3, 4, 5, 7, 9, 10, 12, 13, 18, 19, 20, 23, 24, 26, 27], "class": [4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 27], "error": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 23, 26], "correct": [4, 5, 6, 7, 8, 9, 26, 27], "sift": [4, 5, 8, 9, 11], "bit": [4, 5, 6, 7, 11, 12, 19, 20, 23, 24, 27], "string": [4, 5, 6, 7, 12, 13, 16, 19, 20, 23, 24, 25, 26, 27], "detect": [4, 9, 11, 12, 24], "pariti": [4, 5, 7, 16], "between": [4, 5, 7, 9, 11, 14, 16, 17, 19, 20, 23], "bitstr": [4, 19, 23, 24], "two": [4, 5, 7, 9, 11, 15, 16, 17, 19, 20, 23, 24, 27], "parti": [4, 5, 7, 9, 11, 12, 25], "first": [4, 5, 7, 19, 20], "divid": 4, "messag": [4, 5, 6, 7, 15, 26], "block": [4, 5, 7, 14, 16, 23, 28, 29], "repeat": [4, 13, 24], "pass": [4, 5, 7, 13, 19, 20, 24], "time": [4, 12, 17, 19, 20, 23, 27], "where": [4, 9, 10, 11, 14, 16, 17, 19, 20, 23, 26, 27], "doubl": [4, 5, 19, 20], "an": [4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "when": [4, 9, 10, 11, 12, 19, 20, 23, 25, 26], "odd": 4, "case": [4, 7, 9, 11, 19, 20, 24, 26, 27, 28, 29], "even": 4, "still": [4, 9], "possibl": [4, 10, 12, 21, 23, 25, 26, 27], "exist": [4, 13, 24, 25, 26], "These": [4, 7, 10, 13, 17, 23, 24, 25], "next": [4, 5, 7], "shuffl": 4, "given": [4, 5, 6, 9, 10, 11, 12, 13, 19, 23, 25, 26, 27], "enough": 4, "expect": [4, 11, 14, 15, 23, 27], "howev": [4, 7, 9, 23], "high": [4, 5, 11], "choic": [4, 9, 11], "rate": [4, 5, 6, 7, 8, 9, 10, 11, 12], "thesi": 4, "calver": 4, "timothi": 4, "empir": 4, "analysi": [4, 10], "secret": [4, 5], "reconcili": [4, 5], "2011": 4, "Theses": 4, "dissert": 4, "1521": 4, "http": [4, 8, 19, 20, 22], "scholar": 4, "afit": 4, "edu": 4, "etd": 4, "typic": [4, 6, 7], "paritystrategi": [4, 5], "permut": [4, 5, 7], "cascadecorrector": 4, "cascadereceiv": 4, "cascadesend": 4, "message_length": [4, 5, 6, 7], "100_000": [4, 7], "error_r": [4, 5, 7], "05": [4, 7], "input_messag": [4, 7], "random_messag": [4, 5, 6, 7], "error_messag": [4, 7], "apply_error": [4, 5, 7], "number_of_pass": [4, 5, 7], "sampling_fract": [4, 5], "34": 4, "parity_strategi": 4, "random_permut": [4, 5, 7], "message_s": [4, 5, 7], "alic": [4, 5, 7, 9, 11, 12], "bob": [4, 5, 7, 9, 10, 11, 12], "corrector": [4, 5, 7], "print": [4, 5, 7, 9, 10, 11, 17, 22, 23, 25, 27], "correct_error": [4, 5, 7], "summari": [4, 5, 7], "input_alic": [4, 5, 7], "00010010000111101110111110001000001110111101000110": 4, "output_alic": [4, 5, 7], "input_bob": [4, 5, 7], "10010010001111111110111110001000000110111101000100": 4, "output_bob": [4, 5, 7], "input_error": [4, 5, 7], "float": [4, 5, 6, 7, 9, 10, 11, 12, 14, 16, 17, 19, 20, 23, 24, 26, 27], "05065": 4, "output_error": [4, 5, 7], "output_length": [4, 5, 7], "int": [4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27], "100000": 4, "number_of_exposed_bit": [4, 5, 7], "62301": 4, "key_reconciliation_r": [4, 5, 7], "37699": 4, "number_of_communication_round": [4, 5, 7], "147": 4, "switch_after_pass": [4, 5], "__init__": [4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 27], "init": [4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 27], "sender": [4, 5, 7], "receiv": [4, 5, 6, 7], "origin": [4, 5, 7, 10, 13, 22, 23, 25], "befor": [4, 5, 7, 9, 12, 14, 16, 27], "after": [4, 5, 7, 23], "specif": [4, 5, 7, 9, 10, 11, 12, 19, 20, 24, 28, 29], "cascadecorrectoroutput": 4, "correctoroutputbas": [4, 5, 7], "output": [4, 5, 7, 14, 16, 23], "receiverbas": [4, 5, 7], "encod": [4, 5, 7, 12, 14, 16], "onli": [4, 5, 7, 9, 10, 11, 13, 17, 24, 27], "assum": [4, 5, 7, 9, 10, 19, 27], "thu": [4, 5, 7], "input": [4, 5, 7, 9, 10, 11, 12, 13, 14, 16, 19, 20, 24, 26], "list": [4, 5, 7, 9, 10, 11, 12, 19, 20, 21, 22, 23, 24, 25], "strategi": [4, 5, 15, 16, 28, 29], "rais": [4, 5, 7, 9, 10, 11, 12, 13, 19, 20, 21, 23, 24, 25, 26, 27], "valueerror": [4, 5, 7, 9, 10, 11, 12, 13, 19, 20, 21, 23, 24, 25, 26, 27], "If": [4, 5, 7, 9, 10, 11, 12, 13, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27], "incompat": [4, 5], "check_match_of_par": 4, "current_pass": 4, "current_block": 4, "block_siz": 4, "check": [4, 7, 19, 20, 23, 24, 26, 27], "match": [4, 19, 24, 25, 26], "multipl": [4, 9, 10, 19, 20, 24], "send": [4, 5, 7, 10], "index": [4, 5, 7, 19, 24, 27], "current": [4, 12, 15, 19, 20, 23, 24, 27, 28, 29], "bool": [4, 5, 13, 19, 20, 22, 23, 24, 26, 27], "boolean": [4, 19, 20, 25, 26], "main": [4, 5, 7, 23], "routin": [4, 5, 7, 9], "upper": [4, 5, 9, 11, 12, 19, 20, 26, 27], "bound": [4, 5, 9, 10, 11, 12, 19, 20, 26, 27], "loos": 4, "difficult": 4, "give": [4, 11, 13, 17, 19, 20, 25, 26], "tighter": 4, "senderbas": [4, 5, 7], "typeerror": [4, 5, 7, 13, 19, 20, 21, 23, 24, 26, 27], "do_cascad": 4, "size_blocks_par": [4, 5], "previou": [4, 13], "becom": 4, "appar": 4, "later": 4, "It": [4, 7, 18, 20], "recurs": 4, "long": 4, "new": [4, 5, 7, 12, 13, 19, 23, 24, 26, 27], "tupl": [4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 26, 27], "get_block_index": 4, "index_pass": 4, "correspond": [4, 5, 7, 9, 11, 19, 20, 22, 23, 24, 27], "certain": [4, 9], "get_error_index": 4, "index_block": [4, 7], "half": [4, 11], "both": [4, 5, 7, 9, 11, 12, 23, 27], "posit": [4, 26], "get_error_r": 4, "get_prior_error_r": 4, "index_start": [4, 7], "index_finish": 4, "determin": [4, 5, 6, 7, 8, 13, 19, 24], "initi": [4, 5, 7, 9, 10, 11, 12, 13, 15, 19, 23, 24], "mainli": 4, "debug": [4, 27], "purpos": 4, "usual": [4, 9], "consid": [4, 9, 11, 12, 16, 27], "privat": [4, 25], "cannot": [4, 19, 24, 26], "start": [4, 5, 7, 19, 24], "end": [4, 7, 28], "get_par": [4, 7], "index_end": [4, 7], "pass_numb": [4, 5], "get": [4, 5, 7, 12, 14, 16, 23, 24, 27], "take": [4, 9, 11, 23, 24], "account": [4, 9, 11], "substr": [4, 7, 24, 26], "support": [5, 8, 12, 13, 19, 20, 24, 25], "cascad": [5, 8], "winnow": [5, 8], "present": [5, 8, 27], "exchang": [5, 8], "qkd": [5, 8, 9, 10, 11, 12], "enhanc": 5, "reliabl": 5, "gener": [5, 10, 11, 14, 15, 16, 17, 19, 23, 24, 26, 29], "relev": [5, 8, 12, 13, 27], "submodul": [5, 8, 12, 19, 20], "static": [5, 13, 19, 20, 24, 25], "calculate_error_r": 5, "message1": 5, "message2": 5, "shortest": 5, "second": [5, 12, 19, 23, 27], "ratio": 5, "over": [5, 9, 11, 13, 19, 20, 23, 24, 27], "calculate_key_reconciliation_r": 5, "exposed_bit": 5, "expos": [5, 7], "otherwis": [5, 9, 13, 19, 26], "calculate_number_of_error": 5, "number_of_error": 5, "either": [5, 17, 24, 27], "zero": [5, 9, 17, 19, 20, 22, 24], "detail_transcript": 5, "her": 5, "whether": [5, 13, 19, 20, 23], "detail": [5, 24, 27], "transcript": 5, "create_message_tag_pair": 5, "shared_kei": 5, "prepar": [5, 7, 9], "tag": [5, 13], "hash": [5, 6, 8, 24], "pair": [5, 9, 11, 19, 20, 24, 26], "publicli": 5, "share": 5, "abstract": [5, 12, 15, 19, 24], "effici": [5, 11, 12], "round": [5, 7, 19, 20], "__str__": [5, 24, 27], "represent": [5, 16, 19, 20, 24, 25, 26, 27], "__bytes__": 5, "byte": [5, 6, 19, 20, 24, 27], "__getitem__": [5, 24], "should": [5, 9, 11, 13, 15, 19, 23, 24, 26], "t": [5, 24, 27], "__iter__": [5, 19, 24], "__setitem__": 5, "insert": 5, "specifi": [5, 12, 13, 14, 15, 16, 20, 23, 24, 26, 27], "probabl": [5, 9, 10, 11, 15, 16], "occur": [5, 9, 23], "uniontyp": [5, 13, 17, 21, 23, 26, 27], "randomst": [5, 21, 23, 26], "state": [5, 8, 9, 10, 11, 14, 16, 19, 21, 23], "reproduc": [5, 17, 21, 23], "percentag": [5, 12, 17, 27], "apply_permut": 5, "properti": [5, 12, 19, 20, 21, 23, 24], "pop": 5, "remov": [5, 7, 26], "classmethod": [5, 12, 19, 20, 23, 24, 25, 27], "reason": 5, "mai": [5, 19, 20, 29], "chang": [5, 13, 19, 20], "deal": 5, "fraction": [5, 12, 23], "sampl": [5, 17, 21, 23], "switch": 5, "total": [5, 9, 10, 11, 12, 17, 27], "calculate_message_parity_strategi": 5, "subsequ": [5, 23], "randomli": [5, 9, 11, 13, 23], "get_start_block_s": 5, "largest": 5, "compat": 5, "__add__": [5, 19, 20], "__eq__": [5, 19, 20, 23, 24], "equal": [5, 6, 7, 14, 16, 19, 20, 23, 24, 25, 27], "__len__": [5, 19, 20, 24, 27], "calculate_inverted_permut": 5, "invert": 5, "everi": [5, 7, 24], "shorten_pass": 5, "pass_idx": 5, "max_length": 5, "shorten": 5, "decreas": 5, "adjust": [5, 6, 10], "accordingli": [5, 27], "discard": [5, 7], "larg": [5, 17], "indic": [5, 7, 11, 19, 22, 23, 24, 27], "maximum": [5, 8, 9, 14, 16, 21, 22, 23], "entri": 5, "find": [5, 7, 12, 19, 20, 23], "correct_individual_error": 5, "error_index": 5, "flip": [5, 19, 20, 23, 24], "locat": [5, 11], "schedul": [5, 7], "next_pass": [5, 7], "updat": [5, 13], "describ": [5, 13, 19, 20, 22], "ham": [5, 7], "interact": [5, 19, 20], "remaining_pass": 5, "remain": [5, 6, 10, 23], "schedule_from_error_r": [5, 7], "partial": [5, 19, 22, 23], "net_exposed_bit": 5, "counter": 5, "track": [5, 7], "net": 5, "dure": [5, 13, 23, 27], "minu": 5, "same": [5, 7, 9, 11, 12, 19, 20, 24], "original_messag": 5, "uncorrect": 5, "keep": [5, 7], "compute_effici": 5, "method": [5, 13, 15, 19, 20, 23, 24, 25, 26], "abov": 5, "unknown": 5, "compute_estimate_on_commun": 5, "rough": 5, "among": [5, 18, 24], "privacy_amplif": 5, "privaci": [6, 7, 8], "amplif": [6, 8], "privacyamplif": 6, "entropi": 6, "error_rate_basis_x": 6, "get_entropy_estim": 6, "error_correction_loss": 6, "do_hash": 6, "b": [6, 9, 11, 16, 19, 20], "x11": 6, "x8f": 6, "xba": 6, "xc8": 6, "xc2": 6, "x97": 6, "xce": 6, "xd7": 6, "xf0": 6, "xf4f": 6, "xd1": 6, "xfew": 6, "xf7": 6, "xd0": 6, "xd2y": 6, "x08j": 6, "x1e": 6, "x1a": 6, "xb9": 6, "x1d": 6, "x8d8": 6, "xc5": 6, "x01": 6, "xa7": 6, "u": [6, 14, 16], "xc0": 6, "xcd": 6, "x1bc": 6, "xfck": 6, "xbc_": 6, "xea": 6, "xf5v": 6, "xd9": 6, "x90": 6, "xd4a": 6, "x89": 6, "xdaz": 6, "xf6tq": 6, "xdf": 6, "xe77": 6, "x16": 6, "x07": 6, "x15": 6, "xdc": 6, "x8d": 6, "x86": 6, "x80wy": 6, "x7fhu": 6, "xe3": 6, "xe7": 6, "xcf": 6, "xe6v": 6, "x19": 6, "x1c": 6, "sv": 6, "xad": 6, "x9b": 6, "xc4": 6, "observed_pulses_basis_x": 6, "A": [6, 9, 11, 13, 14, 15, 16, 17, 19, 20, 23, 24, 26, 27], "basi": [6, 9, 11], "obtain": [6, 8, 9, 11, 13, 19, 20, 21, 23, 24], "multipli": [6, 19, 20, 27], "sent": [6, 9, 11], "due": [6, 9, 11, 19, 20], "advantag": [7, 23], "less": [7, 21, 23, 24], "than": [7, 16, 21, 23, 24, 26], "might": [7, 9], "introduc": [7, 12], "With": [7, 23], "leak": 7, "inform": [7, 11, 12, 23, 24, 25, 27, 28, 29], "potenti": [7, 9], "eavesdropp": [7, 9], "overcom": 7, "therebi": 7, "achiev": [7, 11, 12], "mainten": 7, "winnowcorrector": 7, "winnowreceiv": 7, "winnowsend": 7, "43": 7, "00111001111000101101111101011000100010000100000011": 7, "01111111100100100011010100110110101100010110101111": 7, "00111001110000101101111101011100100010000110000011": 7, "04959": 7, "52063": 7, "3647": 7, "48416": 7, "winnowcorrectoroutput": 7, "them": [7, 11, 20, 21, 22, 23, 28, 29], "one": [7, 9, 11, 19, 20, 22, 23, 24, 26, 27], "agre": 7, "afterward": [7, 17], "thei": [7, 12, 19, 20, 25, 27], "per": [7, 9, 10, 12, 23, 27], "syndrom": 7, "fix_errors_with_syndrom": 7, "furthermor": [7, 17, 28, 29], "build_parity_str": 7, "build": [7, 28, 29], "build_syndrome_str": 7, "disagre": 7, "create_parity_check_matrix": 7, "matrix": [7, 19, 20, 25], "disagreeing_block_par": 7, "compar": [7, 23], "done": 7, "wai": [7, 9, 17, 25], "separ": [7, 17, 23, 24, 26], "discard_parity_bit": 7, "discard_syndrome_bit": 7, "j": [7, 9, 19, 20, 27], "linearli": [7, 17], "independ": [7, 28, 29], "column": [7, 27], "bad": 7, "known": [7, 24], "No": 7, "need": [7, 8, 12, 13, 16, 24, 27], "first_pass": 7, "part": [7, 9, 11, 27], "get_syndrom": 7, "individu": [7, 11], "henc": [7, 10, 23], "here": [7, 13, 19, 20], "includ": [7, 11, 14, 15, 16, 17, 18, 20, 23, 24], "permute_buff": 7, "codebas": [8, 12, 27, 28, 29], "paper": [8, 9, 10, 16, 22, 27], "attema": 8, "et": [8, 16, 27], "al": [8, 16, 27], "decoi": [8, 9, 11], "2021": 8, "doi": [8, 9, 10, 11], "org": 8, "1007": [8, 9, 10, 19, 20], "s11128": [8, 9, 10], "021": [8, 9, 10], "03078": [8, 9, 10], "ma": 8, "entangl": [8, 9, 11], "2007": 8, "1103": [8, 11], "physreva": [8, 11], "76": [8, 11], "012307": [8, 11], "bbm92": [8, 12], "classic": [8, 9, 13, 14, 16, 23], "reli": [9, 11], "produc": [9, 11], "choos": [9, 11, 27], "predefin": [9, 11], "measur": [9, 11, 14, 15, 16, 19], "As": [9, 11, 13, 27, 28, 29], "non": [9, 11, 17, 19, 20, 22, 23, 27], "event": [9, 10, 11, 12], "appropri": [9, 11], "kept": [9, 11], "made": [9, 11, 23], "public": [9, 11], "famou": [9, 11], "charl": 9, "bennett": 9, "gill": 9, "brassard": 9, "establish": 9, "call": [9, 13, 23, 24], "four": [9, 28, 29], "alon": 9, "noiseless": 9, "oper": 9, "three": [9, 15, 23], "infinit": 9, "becaus": [9, 23, 24], "simplifi": [9, 10], "instead": [9, 10, 13, 26, 27], "work": [9, 13], "vari": 9, "1e": [9, 10, 11], "efficiency_parti": [9, 10, 11, 12], "fully_asymptotic_key_r": 9, "89982647": 9, "3494369214460756": 9, "chosen": [9, 10, 11, 23], "user": [9, 11, 12, 13, 24, 28, 29], "so": [9, 19, 20, 25], "six": 9, "program": 9, "lp": 9, "asymptotic_key_r": 9, "x0": [9, 10, 11, 12], "8998254": 9, "45375467": 9, "21464554": 9, "13087223": 9, "3494368339817865": 9, "approach": [9, 10, 23], "similar": [9, 10, 23], "effect": [9, 11, 13, 19, 20, 23], "impos": 9, "degre": 9, "certainti": 9, "finite_key_r": [9, 10, 11], "80057214e": 9, "76948581e": 9, "02": 9, "95649571e": 9, "06": 9, "3359095058745817": 9, "kwarg": [9, 10, 11, 12, 19, 20, 23, 24], "asymptotickeyrateestim": [9, 10, 11], "situat": 9, "fix": [9, 17, 19, 23, 27], "side": [9, 10, 11, 12, 19], "argument": [9, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 27], "compute_r": [9, 10, 11, 12], "arraylik": [9, 10, 11, 12, 13, 14, 16, 19, 23, 26, 27], "happen": 9, "unfeas": 9, "slightli": 9, "modifi": [9, 11, 24, 27], "attempt": [9, 19, 23], "feasibl": 9, "channel": [9, 10, 11, 12], "search": [9, 10, 11, 12, 23, 24], "midpoint": 9, "rang": [9, 10, 11, 12, 14, 16, 17, 19, 23, 27], "dtype": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 23, 24, 25, 26, 27], "invalid": [9, 10, 11, 12, 21, 23, 24, 27], "dimens": [9, 10, 11, 12, 26], "neg": [9, 10, 11, 12, 26], "optimizationerror": 9, "unsuccess": 9, "infeas": 9, "1000000000000": [9, 11], "finitekeyrateestim": [9, 11], "probability_basis_x": [9, 11], "probability_basis_z": [9, 11], "n_x": [9, 11], "order": 9, "simultan": [9, 20, 23], "arg": [9, 19, 23, 24], "variabl": [9, 11, 12, 19, 20, 23, 24, 26, 27], "vacuum": 9, "safe": [9, 10, 19, 26, 28, 29], "must": [9, 12, 17, 19, 20, 23, 24, 25, 26, 27], "bound_f": 9, "epsilon": [9, 11], "term": [9, 19, 27, 28, 29], "compute_gain_and_error_r": [9, 10, 11], "gain": [9, 10, 11], "delta": [9, 11], "n_z": 9, "e1": [9, 11], "delta_ec": 9, "p_abort": 9, "abort": 9, "too": 9, "mani": 9, "ensure_prob": 9, "p": [9, 11, 19], "ensur": 9, "throw": 9, "map": [9, 13, 14, 16, 19, 20, 23, 24, 26, 27], "lower_bound_matrix_gain": 9, "max_num_photon": 9, "lower": [9, 12, 19, 20, 26, 27], "likeli": 9, "solve_finite_lp": 9, "target_vacuum": 9, "target_singl": 9, "probabilities_intensity_j": 9, "observed_count": 9, "epsilon_mu_j": 9, "epsilon_num_photons_m": 9, "epsilon_num_photons_m_in_basis_b": 9, "cut": 9, "observ": 9, "optimizeresult": 9, "usabl": [9, 28, 29], "n_0": 9, "n_1": 9, "ldot": [9, 14, 16], "n_m": 9, "m": [9, 16], "delta_": 9, "deviat": [9, 11, 17], "solve_lp": 9, "program_coeffici": 9, "e": [9, 13, 23, 24, 27], "g": [9, 13, 23, 24, 27], "product": [9, 11], "solut": [9, 19, 20, 22, 23, 27, 28, 29], "wa": [9, 11, 19, 23], "most": [10, 19, 22], "propos": 10, "hard": 10, "practic": 10, "attun": 10, "much": 10, "know": [10, 25], "against": [10, 26], "split": [10, 17], "pn": 10, "attack": 10, "standard": [10, 11, 12, 17], "89916328": 10, "858693993504011": 10, "straight": 10, "forward": 10, "close": [10, 13], "express": 10, "seen": 11, "outcom": [11, 23], "allow": [11, 12, 13, 19, 23, 24, 27, 28, 29], "exact": [11, 23], "relat": [11, 12], "tunabl": 11, "let": 11, "you": [11, 13, 20, 23, 27], "directli": [11, 21, 22], "its": [11, 15, 16, 19, 20, 25], "again": 11, "do": [11, 19, 20], "link": [11, 19, 20], "bbm92asymptotickeyrateestim": 11, "04789677": 11, "0013733145512722993": 11, "changeabl": 11, "tune": 11, "confid": 11, "bbm92finitekeyrateestim": 11, "04781671": 11, "0007179260057907571": 11, "detector_alic": 11, "note": [11, 13, 19, 23, 27], "place": 11, "anywher": 11, "middl": 11, "001": [11, 16], "detector_bob": 11, "attenuation_alic": 11, "attenuation_bob": 11, "half_mu": 11, "overal": 11, "coincid": 11, "pump": 11, "incorrect": [11, 23], "error_background": 11, "background": 11, "intrins": 11, "hit": 11, "erron": 11, "rel": [11, 27], "parametr": 11, "down": 11, "convers": 11, "pdc": 11, "cdot": [11, 12, 14, 16, 27], "lambda": [11, 27], "transmitt": 11, "eta_n": 11, "eta_a": 11, "eta_b": 11, "eta_x": 11, "condit": 11, "being": [11, 12, 16, 22, 24, 27], "emit": 11, "yield": [11, 23], "_n": 11, "y_": 11, "0a": 11, "eta_": 11, "0b": 11, "0x": 11, "darkcount": 11, "contribut": [11, 28, 29], "q_n": 11, "y_n": 11, "q_": 11, "sum_": [11, 19, 20, 27], "infti": 11, "qber": 11, "e_": 11, "e_n": 11, "literatur": 11, "equival": [11, 19], "better": 11, "precis": 11, "formula": [11, 12, 16], "deriv": 11, "delta_bit": 11, "efficiency_channel": 11, "efficiency_system": [11, 12], "system": [11, 25], "apparatu": 11, "By": [12, 20, 23, 25], "jitter_sourc": 12, "jitter_detector": 12, "00e": 12, "11": 12, "dead_tim": 12, "50e": 12, "08": 12, "dark_count_frequ": 12, "detection_frequ": 12, "00e07": 12, "detection_window": 12, "throughout": 12, "unit": [12, 17], "unitless": 12, "radian": 12, "rad": 12, "count": 12, "hz": 12, "window": 12, "interv": [12, 17, 19], "bp": 12, "decibel": 12, "122782758757646": 12, "initialis": 12, "delai": 12, "recoveri": 12, "record": 12, "shift": 12, "drift": 12, "dark": 12, "satisfi": [12, 26], "frac": [12, 19, 20, 27], "field": [12, 19, 20], "miss": [12, 24], "inconsist": 12, "__repr__": [12, 19, 20, 24, 25, 27], "repr": 12, "see": [12, 13, 15, 19, 20, 21, 23, 24, 27, 28, 29], "descript": [12, 24], "from_fil": [12, 27], "path": [12, 24, 25, 26, 27], "construct": [12, 19, 20, 22, 23, 24, 27], "csv": [12, 27], "file": [12, 25, 26, 27], "get_paramet": 12, "required_field": 12, "more": [12, 16, 22, 23, 26, 27, 28, 29], "suppli": 12, "highest": [12, 23], "variat": [13, 15], "consist": [13, 15, 17], "intern": [13, 29], "hybrid": [13, 23], "repres": [13, 14, 16, 17, 19, 20, 23, 24, 26, 27], "rise": 13, "circuit": [13, 14, 15, 16, 23], "hardwar": 13, "select": [13, 24], "pennylan": [13, 14, 15, 16, 24], "interfac": [13, 27], "devic": [13, 14, 15, 16, 24], "also": [13, 20, 21, 22, 24, 26, 28, 29], "inspir": 13, "quantuminspir": 13, "plugin": 13, "qi": 13, "starmon": 13, "project": 13, "my": 13, "predictions_valid": [13, 15], "altern": [13, 17, 20, 21, 22, 23], "keyword": [13, 19, 20, 21, 23, 24], "modelconfig": 13, "baseconfig": [13, 19, 20, 24], "qmodel": [13, 14, 15, 16], "supported_item": [13, 19, 20, 21, 22, 23, 24], "constructor": [13, 23, 24, 25], "backend_config": 13, "backendconfig": [13, 14, 15, 16, 23, 24], "wire": [13, 24], "model_config": 13, "model_inst": 13, "get_inst": [13, 19, 20, 21, 22, 23, 24], "keyerror": [13, 19, 20, 24, 26, 27], "doe": [13, 19, 20, 23, 24, 26], "adher": [13, 19, 20], "snake_cas": [13, 19, 20, 24], "convent": [13, 19, 20, 22, 24, 26, 27], "callabl": [13, 14, 15, 16, 24, 25], "classifiermixin": 13, "baseestim": 13, "batch": 13, "docstr": [13, 27], "optimizerconfig": [13, 23, 24], "adagrad": [13, 23, 24], "bia": 13, "seed": [13, 17, 21, 23, 26], "__sklearn_tags__": 13, "test": [13, 17, 24, 25], "shape": [13, 14, 16, 17, 23, 26], "n_sampl": [13, 14, 16, 17], "target": [13, 14, 15, 16, 25, 27], "displai": [13, 26], "progress": 13, "bar": 13, "set_fit_request": 13, "union": [13, 19, 20, 24, 27], "unchang": [13, 23], "request": [13, 19], "metadata": 13, "enable_metadata_rout": 13, "set_config": 13, "pleas": 13, "guid": 13, "rout": 13, "mechan": 13, "ignor": [13, 24], "meta": 13, "alia": [13, 24], "util": [13, 19], "metadata_rout": 13, "retain": 13, "version": [13, 24, 28, 29], "sub": 13, "insid": 13, "self": [13, 19, 20, 23, 24, 25, 28, 29], "set_score_request": 13, "sample_weight": 13, "assign": [14, 15, 19, 27], "expectedvaluemodel": [14, 15], "angl": [14, 16], "unitari": [14, 16], "compos": [14, 16, 23], "trainabl": [14, 15, 16], "layer": [14, 15, 16, 23], "featur": [14, 15, 16, 17, 20], "structur": [14, 16, 27], "w_": [14, 16], "l": [14, 16], "w": [14, 16], "factor": [14, 16, 17, 27], "form": [14, 16, 19, 20, 25], "embed": [14, 16, 23], "get_init_weight": [14, 15, 16], "pi": [14, 16, 23], "get_qfunc": [14, 15, 16], "tensortyp": [14, 15, 16], "min_max": [14, 15, 16], "minimum": [14, 16, 19, 20, 23, 27], "ansatz": 15, "extract": 15, "modulomodel": [15, 16], "paritymodel": [15, 16], "sublay": 15, "extend": 15, "modelerror": 15, "abc": [15, 16, 19, 24], "n_qubit": 15, "attribut": [15, 23, 24, 25], "probability_model": 15, "decim": 16, "reduc": [16, 19, 22, 23], "modulo": 16, "log": 16, "000": [16, 19, 20, 21], "010": [16, 21, 23], "011": 16, "101": 16, "110": 16, "111": 16, "polici": 16, "gradient": 16, "algorithm": [16, 17, 19, 20, 22, 23], "action": 16, "decod": 16, "meyer": 16, "probabilitymodel": 16, "reduct": [16, 22, 27], "left": [16, 19, 20, 27], "right": [16, 19, 20, 27], "mod": 16, "b_0": 16, "b_": 16, "bigoplus_": 16, "b_i": [16, 19], "lceil": 16, "log_2": 16, "rceil": 16, "refer": [16, 27], "wrapper": 17, "around": 17, "wrap": 17, "classifi": [17, 18], "cluster": [17, 18], "easi": [17, 23, 28, 29], "get_anomalous_spiky_time_series_dataset": 17, "n_time": 17, "anomaly_proport": 17, "test_siz": 17, "seri": 17, "normal": 17, "spike": 17, "center": 17, "anomal": 17, "come": 17, "small": 17, "6": [17, 19, 20, 21, 22, 23, 24, 27], "There": 17, "80": 17, "chanc": 17, "x_val": 17, "y_val": 17, "75": [17, 19], "evenli": 17, "space": [17, 23], "anomali": 17, "proport": 17, "absolut": 17, "inf": 17, "int64": 17, "get_blobs_clustering_dataset": 17, "n_center": 17, "blob": 17, "make_blob": 17, "true_label": 17, "get_circles_dataset": 17, "circl": 17, "make_circl": 17, "nois": 17, "60": [17, 23], "iri": 17, "load_iri": 17, "112": 17, "38": 17, "get_linearly_separable_dataset": 17, "make_classif": 17, "n_redund": 17, "n_inform": 17, "n_clusters_per_class": 17, "uniformli": 17, "ad": [17, 24, 25, 27], "get_moons_dataset": 17, "moon": 17, "make_moon": 17, "13": 17, "load_win": 17, "133": 17, "45": 17, "encompass": 18, "machin": [18, 28, 29], "develop": [18, 28, 29], "regress": 18, "benchmark": [18, 27], "One": [19, 20, 22], "instanti": [19, 20, 21, 22, 23, 24], "shown": [19, 20, 23], "bf_solver": [19, 20, 23], "custom_solv": [19, 20, 23], "d_wave_sampler_solv": [19, 20, 23], "exact_sampler_solv": [19, 20, 23], "kerberos_sampler_solv": [19, 20, 23], "leap_hybrid_solv": [19, 20, 23], "neighborhood_solv": [19, 20, 23], "pipeline_solv": [19, 20, 23], "qaoa_solv": [19, 20, 23], "rs_solver": [19, 20, 23], "sa2_solv": [19, 20, 23], "steepest_descent_solv": [19, 20, 23], "tabu_solv": [19, 20, 23], "tree_decomposition_solv": [19, 20, 23], "best_bitvector": [19, 20, 21, 23], "bitvector": [19, 20, 21, 22, 23, 24], "similarli": [19, 20], "preprocessorconfig": [19, 20, 22, 23], "postprocessorconfig": [19, 20, 21, 23], "preprocessor": [19, 20, 23], "postprocessor": [19, 20, 23], "basicresult": [19, 21, 23], "best_valu": [19, 23], "freq": [19, 23], "execution_tim": [19, 23], "num_attempt": [19, 23], "resultinterfac": [19, 23], "from_result": [19, 21, 23], "frequenc": [19, 23], "energi": [19, 20, 23], "num_occurr": 19, "serializ": [19, 20, 24, 25], "bitvectorlik": [19, 20, 23, 24], "castabl": 19, "supportsfloat": [19, 23, 26], "supportsint": [19, 21, 23, 24], "occurr": [19, 23], "element": [19, 20, 22], "cast": [19, 20, 26], "respect": [19, 20], "_bit_vector": 19, "partialsolut": [19, 22, 23], "collect": 19, "x_i": [19, 20, 27], "x_j": [19, 27], "conjug": 19, "assign_vari": 19, "x_0": [19, 22], "x_1": [19, 22], "conj": 19, "x_2": [19, 22], "x_3": 19, "assign_valu": 19, "unassign": 19, "free_vari": 19, "suppos": 19, "free": 19, "x_4": 19, "full": 19, "expand": [19, 22], "11010": 19, "dimension": [19, 23], "supportsindex": 19, "lie": 19, "alreadi": [19, 24, 26], "cycl": 19, "return_typ": 19, "improv": [19, 23, 27], "postprocess": [19, 21, 23], "hint": [19, 21], "earlier": 19, "point": [19, 25, 26, 27], "typevar": [19, 24, 26, 27], "steepest_descent_postprocessor": [19, 20, 21, 23], "config": [19, 20, 24], "steepestdescentpostprocessor": [19, 20, 21], "like": [19, 20, 23, 24], "whose": [19, 20], "anyth": [19, 20, 24], "dictionari": [19, 20, 23, 24, 26, 27], "snake": [19, 20, 24, 26], "while": [19, 22, 26], "maintain": [19, 22], "q_pro_plus_preprocessor": [19, 20, 22, 23], "qpropluspreprocessor": [19, 20, 22], "offset": [19, 20], "quadrat": [19, 20, 27], "dim": [19, 20, 22], "3x3": [19, 20, 22], "rh": [19, 20], "add": [19, 20, 24, 27], "wise": [19, 20], "symmetr": [19, 20], "_buffer": [19, 20, 24, 27], "_supportsarrai": [19, 20, 24, 27], "_nestedsequ": [19, 20, 24, 27], "complex": [19, 20, 23, 24, 27], "binaryquadraticmodel": [19, 20], "bqm": [19, 20], "constant": [19, 20, 27], "__mul__": [19, 20], "scalar": [19, 20], "__rmul__": [19, 20], "__sub__": [19, 20], "subtract": [19, 20], "__truediv__": [19, 20], "divis": [19, 20], "check_valid": [19, 20], "squar": [19, 20], "compute_bound": [19, 20], "convexifi": [19, 20], "integr": [19, 20, 26], "drop": [19, 20], "springer": [19, 20], "com": [19, 20, 22], "articl": [19, 20, 22], "s10107": [19, 20], "005": [19, 20], "0637": [19, 20], "convex": [19, 20, 23], "continu": [19, 20], "cobyla": [19, 20], "relax": [19, 20, 23], "delta_x": [19, 20], "q": [19, 20], "evalu": [19, 20, 23], "flip_indic": [19, 20, 24], "vector": [19, 20, 24, 25], "delta_x2": [19, 20], "ge": [19, 20], "triangular": [19, 20], "eig": [19, 20], "eigenvalu": [19, 20], "eigenvector": [19, 20], "That": [19, 20], "complex128": [19, 20], "linalgerror": [19, 20], "converg": [19, 20], "evaluate_weight": [19, 20], "from_bqm": [19, 20], "lower_bound": [19, 20], "negat": [19, 20], "copi": [19, 20, 24, 26], "maxim": [19, 20, 22, 27], "minim": [19, 20, 22, 27], "interchang": [19, 20], "spectral_gap": [19, 20], "spectral": [19, 20], "gap": [19, 20], "hamiltonian": [19, 20, 23], "h_": [19, 20], "ising": [19, 20], "sum_i": [19, 20], "sigma_x": [19, 20], "h_i": [19, 20], "sigma_z": [19, 20], "j_": [19, 20], "pauli": [19, 20, 23], "matric": [19, 20, 27], "act": [19, 20], "bias": [19, 20], "coupl": [19, 20], "strength": [19, 20], "graph": [19, 20], "lowest": [19, 20, 23], "Not": [19, 20], "recommend": [19, 20], "to_bqm": [19, 20], "integ": [19, 20, 21, 23, 24, 26], "to_is": [19, 20, 24], "lenz": [19, 20, 23, 24], "Ising": [19, 20, 23, 24], "s_i": [19, 20], "1d": [19, 20], "2d": [19, 20], "extern": [19, 20, 23, 25], "to_str": [19, 20], "format": [19, 20, 24], "array2str": [19, 20], "to_symmetric_form": [19, 20], "rewrit": [19, 20], "rewritten": [19, 20], "to_upper_tri_form": [19, 20], "upper_bound": [19, 20], "best": [19, 23], "timedelta": [19, 23, 26], "successfulli": 19, "execut": [19, 23, 27], "took": 19, "check_linear_equality_constraint": 19, "met": [19, 27], "hand": 19, "row": 19, "a_i": 19, "check_linear_inequality_constraint": 19, "inequ": [19, 22], "le": 19, "a_ix": 19, "pars": [19, 23, 26], "get_energy_quantil": 19, "quantil": 19, "sequenc": [19, 24, 27], "get_hist_bin_data": 19, "num_bin": 19, "histogram": [19, 23], "bin": 19, "height": 19, "edg": 19, "plot_hist": 19, "result_typ": 19, "non_determinist": [19, 23], "determinist": [19, 23], "bfsolver": [19, 20], "comprehens": 20, "suit": 20, "tool": [20, 25, 28, 29], "pre": [20, 23], "well": 20, "abil": 20, "compon": [20, 21, 22, 23, 28, 29], "seamlessli": 20, "would": [20, 23], "sample_kwarg": [21, 23], "dimodsamplesetresult": [21, 23], "steepest": [21, 23], "descent": [21, 23], "steepestdescentsolv": [21, 23], "overrid": [21, 23, 25], "d": [21, 23, 27], "wave": [21, 23], "drawn": [21, 23], "definit": [21, 23], "max_it": [22, 23], "onc": [22, 23, 24, 27], "partial_solut": [22, 23], "qubo_reduc": 22, "solution_reduc": 22, "01010": [22, 23], "qpro": 22, "logic": 22, "implic": 22, "difficulti": 22, "fred": 22, "glover": 22, "mark": 22, "lewi": 22, "gari": 22, "kochenberg": 22, "www": 22, "sciencedirect": 22, "scienc": 22, "pii": 22, "s0377221717307567": 22, "rule": 22, "aim": [22, 28, 29], "is_converg": 22, "customsolv": 23, "branch": 23, "simpl": 23, "decompos": 23, "identitydecompos": 23, "simulatedannealingsubproblemsampl": 23, "identitycompos": 23, "whenev": 23, "remotedisconnect": 23, "protocolerror": 23, "connectionerror": 23, "wait": 23, "dwavecliquesamplersolv": 23, "cliqu": 23, "dwavecliquesampl": 23, "dens": 23, "chain": 23, "spars": 23, "dwavesamplersolv": 23, "backend_id": 23, "embedding_se": 23, "return_embed": 23, "reuse_embed": 23, "dwavesampl": 23, "read": [23, 25, 27], "id": 23, "advantage_system4": 23, "onto": 23, "topologi": 23, "minormin": 23, "find_embed": 23, "reus": 23, "lock": 23, "just": 23, "sampleset": 23, "dimod": 23, "exactsamplersolv": 23, "exactli": 23, "brute": 23, "forc": [23, 28, 29], "exactsolv": 23, "iterativeresult": 23, "num_iter": 23, "often": 23, "kerberossamplersolv": 23, "max_tim": 23, "kerbero": 23, "kerberossampl": 23, "wall": 23, "clock": 23, "runtim": 23, "termin": [23, 27], "criterion": 23, "leaphybridsolv": 23, "leap": 23, "leaphybridsampl": 23, "neighborhoodsolv": 23, "initial_bitvector": 23, "solver_typ": 23, "local2_desc": 23, "1000": 23, "neighborhood": 23, "address": 23, "local": 23, "emploi": 23, "local_desc": 23, "limit": 23, "stuck": 23, "minima": 23, "quickli": 23, "explor": 23, "fewer": 23, "escap": 23, "suboptim": 23, "quicker": 23, "mathcal": 23, "pipelineresult": 23, "solver_result": 23, "preprocess_result": 23, "postprocess_result": 23, "pipelinesolv": 23, "preprocessresult": 23, "step": 23, "stage": 23, "desir": 23, "Then": 23, "treat": [23, 24, 26], "preprocess_config": 23, "postprocess_config": 23, "piplin": 23, "intermedi": [23, 27], "access": 23, "about": [23, 25, 27], "enabl": [23, 28, 29], "actual": 23, "qaoaresult": 23, "init_beta": 23, "init_gamma": 23, "final_beta": 23, "final_gamma": 23, "expval_histori": 23, "training_backend": 23, "evaluation_backend": 23, "qaoasolv": 23, "mixer": 23, "cost": 23, "final": 23, "raw_result": 23, "ti": 23, "empti": [23, 24], "plot_expval_histori": 23, "histori": 23, "draw": 23, "plot_paramet": 23, "beta": 23, "gamma": 23, "plot_shots_histogram": 23, "num_lay": 23, "num_it": 23, "approxim": [23, 27], "retriev": [23, 24], "shot": 23, "rssolver": 23, "num_sampl": 23, "control": [23, 29], "greater": [23, 24], "uniform": 23, "randomsamplersolv": 23, "randomsampl": 23, "simulatedannealingsolv": 23, "simulatedannealingsampl": 23, "sweep": 23, "decent": 23, "tabusolv": 23, "tabu": 23, "tabusampl": 23, "treedecompositionsolv": 23, "decomposit": 23, "101010": 24, "sort": 24, "clifford": 24, "gaussian": 24, "mix": 24, "default_qubit": 24, "defaultqubit": 24, "modulenotfounderror": 24, "baseargu": 24, "dataclass": 24, "exampleargu": 24, "from_map": 24, "associ": 24, "store": [24, 25, 27], "recogn": 24, "userwarn": 24, "easili": 24, "arbitrari": [24, 27], "camelcas": 24, "pascalcas": 24, "testsolv": 24, "test_solv": 24, "mul": 24, "integerconfig": 24, "staticmethod": 24, "additional_arg": 24, "additional_kwarg": 24, "prioriti": 24, "prefix": 24, "prevent": 24, "conflict": 24, "storag": 24, "register_custom_item": 24, "regist": [24, 25, 27], "Will": [24, 26], "itself": 24, "supported_custom_item": 24, "uint8": 24, "datatyp": 24, "1001": 24, "__array__": 24, "slice": 24, "__hash__": 24, "uniqu": 24, "concaten": 24, "concatenate_bit_vector": 24, "bit_vector": 24, "inplac": 24, "particular": 24, "int8": 24, "torch": 24, "rprop": 24, "stochastic_gradient_desc": 24, "lr": 24, "param": 24, "rand": 24, "sdg": 24, "convert_to_snake_cas": 24, "period": [24, 26], "charact": 24, "letter": [24, 26], "variant": [24, 27], "get_installed_subclass": 24, "module_nam": 24, "subclass": 24, "within": 24, "serial": 24, "deseri": 25, "inherit": 25, "to_json": 25, "from_json": 25, "automat": 25, "json": [25, 27], "point_json": 25, "__class__": 25, "therefor": 25, "sure": 25, "your": [25, 28, 29], "signatur": 25, "third": 25, "de": 25, "serialize_ndarrai": 25, "tolist": 25, "deserialize_ndarrai": 25, "now": [25, 27], "linearsystem": 25, "system_json": 25, "_serial": 25, "_deseri": 25, "cl": 25, "special": 25, "invers": 25, "framework": 25, "ill": 25, "notimplementederror": 25, "from_json_fil": 25, "filenotfounderror": [25, 26], "from_yaml": 25, "yaml": 25, "from_yaml_fil": 25, "class_obj": 25, "primit": 25, "indent": 25, "pretti": 25, "level": 25, "to_json_fil": 25, "write": 25, "to_yaml": 25, "to_yaml_fil": 25, "check_serializ": 25, "serializable_object": 25, "reconstruct": 25, "assertionerror": 25, "check_arraylik": 26, "ndim": 26, "squeez": 26, "check_ax": 26, "check_binari": 26, "could": 26, "check_bool": 26, "check_inst": 26, "type_inst": 26, "check_int": 26, "l_bound": [26, 27], "u_bound": [26, 27], "l_inclus": 26, "u_inclus": 26, "inclus": 26, "exclus": 26, "outsid": 26, "check_kwarglik": 26, "kwarglik": 26, "deep": 26, "least": [26, 27], "check_lower_bound": 26, "type_bound": 26, "check_path": 26, "must_exist": 26, "must_be_fil": 26, "must_be_dir": 26, "required_suffix": 26, "directori": 26, "suffix": 26, "replac": [26, 27], "oserror": 26, "notadirectoryerror": 26, "check_python_vari": 26, "warn": 26, "issu": 26, "check_random_st": 26, "unseed": 26, "check_real": 26, "real": [26, 28, 29], "check_snake_cas": 26, "check_str": 26, "lowercas": 26, "uppercas": 26, "check_timedelta": 26, "check_upper_bound": 26, "warn_if_neg": 26, "warn_if_posit": 26, "portfolio": 27, "capit": 27, "herfindahl": 27, "hirschman": 27, "hhi": 27, "growth": 27, "head": 27, "473": 27, "26": 27, "666666666666668": 27, "1410": 27, "74": 27, "105045": 27, "102454": 27, "514694": 27, "29": 27, "999998": 27, "19": 27, "28": 27, "1196": 27, "6666666666667": 27, "574088": 27, "556330": 27, "520952": 27, "999992": 27, "17": 27, "333333333333332": 27, "509": 27, "24": 27, "979830": 27, "397679": 27, "566499": 27, "999988": 27, "666666666666666": 27, "491": 27, "3333333333333": 27, "333": 27, "875721": 27, "025964": 27, "531100": 27, "000023": 27, "697235": 27, "117611": 27, "555159": 27, "999977": 27, "pareto": 27, "front": 27, "worsen": 27, "plot_front": 27, "slice_result": 27, "orang": 27, "green": 27, "excel": 27, "panda": 27, "datafram": 27, "asset": 27, "min_outstanding_futur": 27, "futur": 27, "max_outstanding_futur": 27, "income_now": 27, "incom": 27, "regcap_now": 27, "regulatori": 27, "tabl": 27, "sector": 27, "countri": 27, "600": 27, "528": 27, "70": 27, "800": 27, "1090": 27, "56": 27, "291": 27, "397": 27, "renam": 27, "portfoliodata": 27, "aguilera": 27, "optimis": 27, "2024": 27, "portfolio_datafram": 27, "columns_renam": 27, "info": 27, "print_portfolio_info": 27, "21252": 27, "0642": 27, "0000": 27, "43355508": 27, "2040": 27, "31368": 27, "std": 27, "dev": 27, "886": 27, "39": 27, "averag": 27, "4760": 27, "0417": 27, "__contains__": 27, "outstanding_now_now": 27, "outstanding_2021": 27, "filenam": 27, "52": 27, "portfoliodatat": 27, "get_capit": 27, "column_nam": 27, "get_incom": 27, "get_l_bound": 27, "get_return": 27, "get_u_bound": 27, "demand": 27, "increas": 27, "equidist": 27, "lb_i": 27, "ub_i": 27, "wrong": 27, "reduction_percentage_target": 27, "nf_i": 27, "g_e": 27, "ne_i": 27, "y_i": 27, "e_i": 27, "f_i": 27, "doc": 27, "calc_emission_constraint": 27, "df": 27, "add_growth_factor_constraint": 27, "growth_target": 27, "g_c": 27, "calc_growth_factor_constraint": 27, "ancilla_vari": 27, "weights_stabil": 27, "r_i": 27, "c_i": 27, "roc_1": 27, "roc_2": 27, "c_": 27, "21": 27, "ancilla": 27, "stabil": 27, "extra": 27, "calc_maximize_roc1": 27, "calc_maximize_roc2": 27, "ancillari": 27, "calc_minimize_hhi": 27, "qubofactori": 27, "factori": 27, "conveni": 27, "calc_stabilize_c": 27, "x_": 27, "g_": 27, "inv": 27, "g_j": 27, "diversification_valu": 27, "roc_valu": 27, "overview": 27, "min": 27, "colormap": 27, "cover": 27, "max": 27, "blend": 27, "patchcollect": 27, "pathcollect": 27, "dedic": [28, 29], "reusabl": [28, 29], "softwar": [28, 29], "technologi": [28, 29], "driven": [28, 29], "further": [28, 29], "applic": [28, 29], "focu": [28, 29], "world": [28, 29], "netherland": [28, 29], "organis": [28, 29], "scientif": [28, 29], "research": [28, 29], "safer": [28, 29], "healthier": [28, 29], "sustain": [28, 29], "life": [28, 29], "drive": [28, 29], "behind": [28, 29], "innov": [28, 29], "knowledg": [28, 29], "serv": [28, 29], "common": [28, 29], "good": [28, 29], "societ": [28, 29], "challeng": [28, 29], "societi": [28, 29], "healthi": [28, 29], "digit": [28, 29], "mission": [28, 29], "lab": [28, 29], "websit": [28, 29], "blog": [28, 29], "cyber": [28, 29], "crypto": [28, 29], "commonli": [28, 29], "licens": [28, 29], "apach": [28, 29], "adopt": [28, 29], "flexibl": [28, 29], "enforc": [28, 29], "contributor": [28, 29], "alwai": [28, 29], "question": [28, 29], "suggest": [28, 29], "facilit": 29, "content": 29, "sole": 29, "compli": 29, "export": 29, "law": 29}, "objects": {"tno.quantum.communication": [[8, 0, 0, "-", "qkd_key_rate"]], "tno.quantum.communication.qkd_key_rate": [[5, 0, 0, "-", "classical"], [12, 0, 0, "-", "quantum"]], "tno.quantum.communication.qkd_key_rate.classical": [[5, 1, 1, "", "Corrector"], [5, 1, 1, "", "CorrectorOutputBase"], [5, 1, 1, "", "Message"], [5, 1, 1, "", "ParityStrategy"], [5, 1, 1, "", "Permutations"], [5, 1, 1, "", "ReceiverBase"], [5, 1, 1, "", "Schedule"], [5, 1, 1, "", "SenderBase"], [4, 0, 0, "-", "cascade"], [5, 5, 1, "", "compute_efficiency"], [5, 5, 1, "", "compute_estimate_on_communication"], [6, 0, 0, "-", "privacy_amplification"], [7, 0, 0, "-", "winnow"]], "tno.quantum.communication.qkd_key_rate.classical.Corrector": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "calculate_error_rate"], [5, 2, 1, "", "calculate_key_reconciliation_rate"], [5, 2, 1, "", "calculate_number_of_errors"], [5, 2, 1, "", "correct_errors"], [5, 2, 1, "", "create_message_tag_pair"], [5, 2, 1, "", "summary"]], "tno.quantum.communication.qkd_key_rate.classical.CorrectorOutputBase": [[5, 2, 1, "", "__str__"], [5, 3, 1, "", "input_alice"], [5, 3, 1, "", "input_bob"], [5, 3, 1, "", "input_error"], [5, 3, 1, "", "key_reconciliation_rate"], [5, 3, 1, "", "number_of_communication_rounds"], [5, 3, 1, "", "number_of_exposed_bits"], [5, 3, 1, "", "output_alice"], [5, 3, 1, "", "output_bob"], [5, 3, 1, "", "output_error"], [5, 3, 1, "", "output_length"]], "tno.quantum.communication.qkd_key_rate.classical.Message": [[5, 2, 1, "", "__bytes__"], [5, 2, 1, "", "__getitem__"], [5, 2, 1, "", "__init__"], [5, 2, 1, "", "__iter__"], [5, 2, 1, "", "__setitem__"], [5, 2, 1, "", "__str__"], [5, 2, 1, "", "apply_errors"], [5, 2, 1, "", "apply_permutation"], [5, 4, 1, "", "length"], [5, 3, 1, "", "message"], [5, 2, 1, "", "pop"], [5, 2, 1, "", "random_message"]], "tno.quantum.communication.qkd_key_rate.classical.ParityStrategy": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "calculate_message_parity_strategy"], [5, 2, 1, "", "get_start_block_size"]], "tno.quantum.communication.qkd_key_rate.classical.Permutations": [[5, 2, 1, "", "__add__"], [5, 2, 1, "", "__eq__"], [5, 2, 1, "", "__getitem__"], [5, 2, 1, "", "__init__"], [5, 2, 1, "", "__len__"], [5, 2, 1, "", "calculate_inverted_permutations"], [5, 2, 1, "", "random_permutation"], [5, 2, 1, "", "shorten_pass"]], "tno.quantum.communication.qkd_key_rate.classical.ReceiverBase": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "correct_errors"], [5, 2, 1, "", "correct_individual_error"]], "tno.quantum.communication.qkd_key_rate.classical.Schedule": [[5, 2, 1, "", "__eq__"], [5, 2, 1, "", "__init__"], [5, 2, 1, "", "__len__"], [5, 2, 1, "", "__str__"], [5, 2, 1, "", "next_pass"], [5, 4, 1, "", "remaining_passes"], [5, 2, 1, "", "schedule_from_error_rate"]], "tno.quantum.communication.qkd_key_rate.classical.SenderBase": [[5, 2, 1, "", "__init__"], [5, 4, 1, "", "message"], [5, 4, 1, "", "net_exposed_bits"], [5, 4, 1, "", "number_of_exposed_bits"], [5, 4, 1, "", "original_message"], [5, 3, 1, "", "transcript"]], "tno.quantum.communication.qkd_key_rate.classical.cascade": [[4, 1, 1, "", "CascadeCorrector"], [4, 1, 1, "", "CascadeCorrectorOutput"], [4, 1, 1, "", "CascadeReceiver"], [4, 1, 1, "", "CascadeSender"]], "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeCorrector": [[4, 2, 1, "", "__init__"], [4, 2, 1, "", "summary"]], "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeCorrectorOutput": [[4, 3, 1, "", "number_of_passes"], [4, 3, 1, "", "sampling_fraction"], [4, 3, 1, "", "switch_after_pass"]], "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeReceiver": [[4, 2, 1, "", "__init__"], [4, 2, 1, "", "check_match_of_parities"], [4, 2, 1, "", "correct_errors"], [4, 2, 1, "", "do_cascade"], [4, 2, 1, "", "get_block_index"], [4, 2, 1, "", "get_error_index"], [4, 2, 1, "", "get_error_rate"], [4, 2, 1, "", "get_prior_error_rate"]], "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeSender": [[4, 2, 1, "", "__init__"], [4, 2, 1, "", "get_parity"]], "tno.quantum.communication.qkd_key_rate.classical.privacy_amplification": [[6, 1, 1, "", "PrivacyAmplification"]], "tno.quantum.communication.qkd_key_rate.classical.privacy_amplification.PrivacyAmplification": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "do_hash"], [6, 2, 1, "", "get_entropy_estimate"]], "tno.quantum.communication.qkd_key_rate.classical.winnow": [[7, 1, 1, "", "WinnowCorrector"], [7, 1, 1, "", "WinnowCorrectorOutput"], [7, 1, 1, "", "WinnowReceiver"], [7, 1, 1, "", "WinnowSender"]], "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowCorrector": [[7, 2, 1, "", "__init__"], [7, 2, 1, "", "summary"]], "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowCorrectorOutput": [[7, 3, 1, "", "schedule"]], "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowReceiver": [[7, 2, 1, "", "__init__"], [7, 2, 1, "", "correct_errors"], [7, 2, 1, "", "fix_errors_with_syndrome"]], "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowSender": [[7, 2, 1, "", "__init__"], [7, 2, 1, "", "build_parity_string"], [7, 2, 1, "", "build_syndrome_string"], [7, 2, 1, "", "create_parity_check_matrix"], [7, 2, 1, "", "disagreeing_block_parities"], [7, 2, 1, "", "discard_parity_bits"], [7, 2, 1, "", "discard_syndrome_bits"], [7, 2, 1, "", "first_pass"], [7, 2, 1, "", "get_parity"], [7, 2, 1, "", "get_syndrome"], [7, 2, 1, "", "next_pass"], [7, 2, 1, "", "permute_buffer"]], "tno.quantum.communication.qkd_key_rate.quantum": [[12, 1, 1, "", "Detector"], [12, 1, 1, "", "KeyRate"], [9, 0, 0, "-", "bb84"], [10, 0, 0, "-", "bb84_single_photon"], [11, 0, 0, "-", "bbm92"]], "tno.quantum.communication.qkd_key_rate.quantum.Detector": [[12, 2, 1, "", "__init__"], [12, 2, 1, "", "__repr__"], [12, 2, 1, "", "customise"], [12, 2, 1, "", "from_file"], [12, 2, 1, "", "get_parameters"], [12, 3, 1, "", "required_fields"]], "tno.quantum.communication.qkd_key_rate.quantum.KeyRate": [[12, 2, 1, "", "__init__"], [12, 2, 1, "", "compute_rate"], [12, 2, 1, "", "optimize_rate"]], "tno.quantum.communication.qkd_key_rate.quantum.bb84": [[9, 1, 1, "", "BB84AsymptoticKeyRateEstimate"], [9, 1, 1, "", "BB84FiniteKeyRateEstimate"], [9, 1, 1, "", "BB84FullyAsymptoticKeyRateEstimate"], [9, 5, 1, "", "bound_f"], [9, 5, 1, "", "compute_gain_and_error_rate"], [9, 5, 1, "", "delta"], [9, 5, 1, "", "delta_ec"], [9, 5, 1, "", "ensure_probability"], [9, 5, 1, "", "lower_bound_matrix_gain"], [9, 5, 1, "", "solve_finite_lp"], [9, 5, 1, "", "solve_lp"]], "tno.quantum.communication.qkd_key_rate.quantum.bb84.BB84AsymptoticKeyRateEstimate": [[9, 2, 1, "", "__init__"], [9, 2, 1, "", "compute_rate"], [9, 2, 1, "", "optimize_rate"]], "tno.quantum.communication.qkd_key_rate.quantum.bb84.BB84FiniteKeyRateEstimate": [[9, 2, 1, "", "__init__"], [9, 2, 1, "", "compute_rate"], [9, 2, 1, "", "optimize_rate"]], "tno.quantum.communication.qkd_key_rate.quantum.bb84.BB84FullyAsymptoticKeyRateEstimate": [[9, 2, 1, "", "__init__"], [9, 2, 1, "", "compute_rate"], [9, 2, 1, "", "optimize_rate"]], "tno.quantum.communication.qkd_key_rate.quantum.bb84_single_photon": [[10, 1, 1, "", "BB84SingleAsymptoticKeyRateEstimate"], [10, 5, 1, "", "compute_gain_and_error_rate"]], "tno.quantum.communication.qkd_key_rate.quantum.bb84_single_photon.BB84SingleAsymptoticKeyRateEstimate": [[10, 2, 1, "", "__init__"], [10, 2, 1, "", "compute_rate"], [10, 2, 1, "", "optimize_rate"]], "tno.quantum.communication.qkd_key_rate.quantum.bbm92": [[11, 1, 1, "", "BBM92AsymptoticKeyRateEstimate"], [11, 1, 1, "", "BBM92FiniteKeyRateEstimate"], [11, 5, 1, "", "compute_gain_and_error_rate"], [11, 5, 1, "", "delta"], [11, 5, 1, "", "efficiency_channel"], [11, 5, 1, "", "efficiency_system"]], "tno.quantum.communication.qkd_key_rate.quantum.bbm92.BBM92AsymptoticKeyRateEstimate": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "compute_rate"], [11, 2, 1, "", "optimize_rate"]], "tno.quantum.communication.qkd_key_rate.quantum.bbm92.BBM92FiniteKeyRateEstimate": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "compute_rate"], [11, 2, 1, "", "optimize_rate"]], "tno.quantum": [[18, 0, 0, "-", "ml"], [24, 0, 0, "-", "utils"]], "tno.quantum.ml.classifiers": [[13, 0, 0, "-", "vc"]], "tno.quantum.ml.classifiers.vc": [[13, 1, 1, "", "ModelConfig"], [13, 1, 1, "", "VariationalClassifier"], [15, 0, 0, "-", "models"]], "tno.quantum.ml.classifiers.vc.ModelConfig": [[13, 2, 1, "", "__init__"], [13, 3, 1, "", "name"], [13, 3, 1, "", "options"], [13, 2, 1, "", "supported_items"]], "tno.quantum.ml.classifiers.vc.VariationalClassifier": [[13, 2, 1, "", "__init__"], [13, 2, 1, "", "__sklearn_tags__"], [13, 2, 1, "", "fit"], [13, 2, 1, "", "predict"], [13, 2, 1, "", "set_fit_request"], [13, 2, 1, "", "set_score_request"]], "tno.quantum.ml.classifiers.vc.models": [[15, 6, 1, "", "ModelError"], [15, 1, 1, "", "QModel"], [14, 0, 0, "-", "expected_value_model"], [16, 0, 0, "-", "probability_model"]], "tno.quantum.ml.classifiers.vc.models.ModelError": [[15, 2, 1, "", "__init__"]], "tno.quantum.ml.classifiers.vc.models.QModel": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "get_init_weights"], [15, 2, 1, "", "get_qfunc"], [15, 2, 1, "", "preprocess"]], "tno.quantum.ml.classifiers.vc.models.expected_value_model": [[14, 1, 1, "", "ExpectedValueModel"]], "tno.quantum.ml.classifiers.vc.models.expected_value_model.ExpectedValueModel": [[14, 2, 1, "", "__init__"], [14, 3, 1, "", "backend"], [14, 2, 1, "", "get_init_weights"], [14, 2, 1, "", "get_qfunc"], [14, 3, 1, "", "n_classes"], [14, 3, 1, "", "n_layers"], [14, 3, 1, "", "n_trainable_sublayers"], [14, 2, 1, "", "preprocess"], [14, 3, 1, "", "scaling"]], "tno.quantum.ml.classifiers.vc.models.probability_model": [[16, 1, 1, "", "ModuloModel"], [16, 1, 1, "", "ParityModel"], [16, 1, 1, "", "ProbabilityModel"]], "tno.quantum.ml.classifiers.vc.models.probability_model.ProbabilityModel": [[16, 2, 1, "", "__init__"], [16, 3, 1, "", "backend"], [16, 2, 1, "", "get_init_weights"], [16, 2, 1, "", "get_qfunc"], [16, 3, 1, "", "n_classes"], [16, 3, 1, "", "n_layers"], [16, 3, 1, "", "n_trainable_sublayers"], [16, 2, 1, "", "preprocess"], [16, 3, 1, "", "scaling"]], "tno.quantum.ml": [[17, 0, 0, "-", "datasets"]], "tno.quantum.ml.datasets": [[17, 5, 1, "", "get_anomalous_spiky_time_series_dataset"], [17, 5, 1, "", "get_blobs_clustering_dataset"], [17, 5, 1, "", "get_circles_dataset"], [17, 5, 1, "", "get_iris_dataset"], [17, 5, 1, "", "get_linearly_separable_dataset"], [17, 5, 1, "", "get_moons_dataset"], [17, 5, 1, "", "get_wine_dataset"]], "tno.quantum.optimization": [[20, 0, 0, "-", "qubo"]], "tno.quantum.optimization.qubo": [[20, 1, 1, "", "PostprocessorConfig"], [20, 1, 1, "", "PreprocessorConfig"], [20, 1, 1, "", "QUBO"], [20, 1, 1, "", "SolverConfig"], [19, 0, 0, "-", "components"], [21, 0, 0, "-", "postprocessors"], [22, 0, 0, "-", "preprocessors"], [23, 0, 0, "-", "solvers"]], "tno.quantum.optimization.qubo.PostprocessorConfig": [[20, 2, 1, "", "__init__"], [20, 2, 1, "", "supported_items"]], "tno.quantum.optimization.qubo.PreprocessorConfig": [[20, 2, 1, "", "__init__"], [20, 2, 1, "", "supported_items"]], "tno.quantum.optimization.qubo.QUBO": [[20, 2, 1, "", "__add__"], [20, 2, 1, "", "__eq__"], [20, 2, 1, "", "__init__"], [20, 2, 1, "", "__len__"], [20, 2, 1, "", "__mul__"], [20, 2, 1, "", "__repr__"], [20, 2, 1, "", "__rmul__"], [20, 2, 1, "", "__sub__"], [20, 2, 1, "", "__truediv__"], [20, 2, 1, "", "check_valid"], [20, 2, 1, "", "compute_bounds"], [20, 2, 1, "", "delta_x"], [20, 2, 1, "", "delta_x2"], [20, 2, 1, "", "eig"], [20, 2, 1, "", "evaluate"], [20, 2, 1, "", "evaluate_weighted"], [20, 2, 1, "", "from_bqm"], [20, 4, 1, "", "lower_bound"], [20, 4, 1, "", "matrix"], [20, 2, 1, "", "negate"], [20, 4, 1, "", "offset"], [20, 4, 1, "", "size"], [20, 2, 1, "", "spectral_gap"], [20, 2, 1, "", "to_bqm"], [20, 2, 1, "", "to_ising"], [20, 2, 1, "", "to_string"], [20, 2, 1, "", "to_symmetric_form"], [20, 2, 1, "", "to_upper_tri_form"], [20, 4, 1, "", "upper_bound"]], "tno.quantum.optimization.qubo.SolverConfig": [[20, 2, 1, "", "__init__"], [20, 2, 1, "", "supported_items"]], "tno.quantum.optimization.qubo.components": [[19, 1, 1, "", "BasicResult"], [19, 1, 1, "", "Freq"], [19, 1, 1, "", "PartialSolution"], [19, 1, 1, "", "Postprocessor"], [19, 1, 1, "", "PostprocessorConfig"], [19, 1, 1, "", "Preprocessor"], [19, 1, 1, "", "PreprocessorConfig"], [19, 1, 1, "", "QUBO"], [19, 1, 1, "", "ResultInterface"], [19, 1, 1, "", "Solver"], [19, 1, 1, "", "SolverConfig"]], "tno.quantum.optimization.qubo.components.BasicResult": [[19, 2, 1, "", "__eq__"], [19, 2, 1, "", "from_result"]], "tno.quantum.optimization.qubo.components.Freq": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "__iter__"], [19, 3, 1, "", "bitvectors"], [19, 3, 1, "", "energies"], [19, 3, 1, "", "num_occurrences"]], "tno.quantum.optimization.qubo.components.PartialSolution": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "apply"], [19, 2, 1, "", "assign_value"], [19, 2, 1, "", "assign_variable"], [19, 2, 1, "", "expand"], [19, 2, 1, "", "free_variables"], [19, 4, 1, "", "n"]], "tno.quantum.optimization.qubo.components.Postprocessor": [[19, 2, 1, "", "postprocess"]], "tno.quantum.optimization.qubo.components.PostprocessorConfig": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "supported_items"]], "tno.quantum.optimization.qubo.components.Preprocessor": [[19, 2, 1, "", "preprocess"]], "tno.quantum.optimization.qubo.components.PreprocessorConfig": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "supported_items"]], "tno.quantum.optimization.qubo.components.QUBO": [[19, 2, 1, "", "__add__"], [19, 2, 1, "", "__eq__"], [19, 2, 1, "", "__init__"], [19, 2, 1, "", "__len__"], [19, 2, 1, "", "__mul__"], [19, 2, 1, "", "__repr__"], [19, 2, 1, "", "__rmul__"], [19, 2, 1, "", "__sub__"], [19, 2, 1, "", "__truediv__"], [19, 2, 1, "", "check_valid"], [19, 2, 1, "", "compute_bounds"], [19, 2, 1, "", "delta_x"], [19, 2, 1, "", "delta_x2"], [19, 2, 1, "", "eig"], [19, 2, 1, "", "evaluate"], [19, 2, 1, "", "evaluate_weighted"], [19, 2, 1, "", "from_bqm"], [19, 4, 1, "", "lower_bound"], [19, 4, 1, "", "matrix"], [19, 2, 1, "", "negate"], [19, 4, 1, "", "offset"], [19, 4, 1, "", "size"], [19, 2, 1, "", "spectral_gap"], [19, 2, 1, "", "to_bqm"], [19, 2, 1, "", "to_ising"], [19, 2, 1, "", "to_string"], [19, 2, 1, "", "to_symmetric_form"], [19, 2, 1, "", "to_upper_tri_form"], [19, 4, 1, "", "upper_bound"]], "tno.quantum.optimization.qubo.components.ResultInterface": [[19, 2, 1, "", "__init__"], [19, 4, 1, "", "best_bitvector"], [19, 4, 1, "", "best_value"], [19, 2, 1, "", "check_linear_equality_constraint"], [19, 2, 1, "", "check_linear_inequality_constraint"], [19, 4, 1, "", "execution_time"], [19, 4, 1, "", "freq"], [19, 2, 1, "", "from_result"], [19, 2, 1, "", "get_energy_quantiles"], [19, 2, 1, "", "get_hist_bin_data"], [19, 4, 1, "", "num_attempts"], [19, 2, 1, "", "plot_hist"]], "tno.quantum.optimization.qubo.components.Solver": [[19, 3, 1, "", "non_deterministic"], [19, 2, 1, "", "solve"]], "tno.quantum.optimization.qubo.components.SolverConfig": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "supported_items"]], "tno.quantum.optimization.qubo.postprocessors": [[21, 1, 1, "", "SteepestDescentPostprocessor"]], "tno.quantum.optimization.qubo.postprocessors.SteepestDescentPostprocessor": [[21, 2, 1, "", "__init__"], [21, 4, 1, "", "num_reads"], [21, 4, 1, "", "random_state"], [21, 4, 1, "", "sample_kwargs"]], "tno.quantum.optimization.qubo.preprocessors": [[22, 1, 1, "", "QProPlusPreprocessor"]], "tno.quantum.optimization.qubo.preprocessors.QProPlusPreprocessor": [[22, 2, 1, "", "__init__"], [22, 3, 1, "", "is_converged"], [22, 2, 1, "", "preprocess"]], "tno.quantum.optimization.qubo.solvers": [[23, 1, 1, "", "CustomSolver"], [23, 1, 1, "", "DWaveCliqueSamplerSolver"], [23, 1, 1, "", "DWaveSamplerSolver"], [23, 1, 1, "", "DimodSampleSetResult"], [23, 1, 1, "", "ExactSamplerSolver"], [23, 1, 1, "", "IterativeResult"], [23, 1, 1, "", "KerberosSamplerSolver"], [23, 1, 1, "", "LeapHybridSolver"], [23, 1, 1, "", "NeighborhoodSolver"], [23, 1, 1, "", "PipelineResult"], [23, 1, 1, "", "PipelineSolver"], [23, 1, 1, "", "PreprocessResult"], [23, 1, 1, "", "QAOAResult"], [23, 1, 1, "", "QAOASolver"], [23, 1, 1, "", "RSSolver"], [23, 1, 1, "", "RandomSamplerSolver"], [23, 1, 1, "", "SimulatedAnnealingSolver"], [23, 1, 1, "", "SteepestDescentSolver"], [23, 1, 1, "", "TabuSolver"], [23, 1, 1, "", "TreeDecompositionSolver"]], "tno.quantum.optimization.qubo.solvers.CustomSolver": [[23, 2, 1, "", "__init__"], [23, 3, 1, "", "non_deterministic"]], "tno.quantum.optimization.qubo.solvers.DWaveCliqueSamplerSolver": [[23, 2, 1, "", "__init__"], [23, 3, 1, "", "non_deterministic"]], "tno.quantum.optimization.qubo.solvers.DWaveSamplerSolver": [[23, 2, 1, "", "__init__"], [23, 3, 1, "", "non_deterministic"]], "tno.quantum.optimization.qubo.solvers.DimodSampleSetResult": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "from_result"]], "tno.quantum.optimization.qubo.solvers.ExactSamplerSolver": [[23, 2, 1, "", "__init__"]], "tno.quantum.optimization.qubo.solvers.IterativeResult": [[23, 2, 1, "", "from_result"], [23, 4, 1, "", "num_iterations"]], "tno.quantum.optimization.qubo.solvers.KerberosSamplerSolver": [[23, 2, 1, "", "__init__"], [23, 3, 1, "", "non_deterministic"]], "tno.quantum.optimization.qubo.solvers.LeapHybridSolver": [[23, 2, 1, "", "__init__"], [23, 3, 1, "", "non_deterministic"]], "tno.quantum.optimization.qubo.solvers.NeighborhoodSolver": [[23, 2, 1, "", "__init__"]], "tno.quantum.optimization.qubo.solvers.PipelineResult": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "from_result"]], "tno.quantum.optimization.qubo.solvers.PipelineSolver": [[23, 2, 1, "", "__init__"]], "tno.quantum.optimization.qubo.solvers.PreprocessResult": [[23, 2, 1, "", "__eq__"], [23, 2, 1, "", "__init__"], [23, 2, 1, "", "from_result"], [23, 4, 1, "", "partial_solution"]], "tno.quantum.optimization.qubo.solvers.QAOAResult": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "from_result"], [23, 2, 1, "", "plot_expval_history"], [23, 2, 1, "", "plot_parameters"], [23, 2, 1, "", "plot_shots_histogram"]], "tno.quantum.optimization.qubo.solvers.QAOASolver": [[23, 2, 1, "", "__init__"], [23, 4, 1, "", "evaluation_backend"], [23, 4, 1, "", "init_beta"], [23, 4, 1, "", "init_gamma"], [23, 4, 1, "", "num_iter"], [23, 4, 1, "", "num_layers"], [23, 4, 1, "", "optimizer"], [23, 4, 1, "", "training_backend"], [23, 4, 1, "", "verbose"]], "tno.quantum.optimization.qubo.solvers.RSSolver": [[23, 2, 1, "", "__init__"]], "tno.quantum.optimization.qubo.solvers.RandomSamplerSolver": [[23, 2, 1, "", "__init__"]], "tno.quantum.optimization.qubo.solvers.SimulatedAnnealingSolver": [[23, 2, 1, "", "__init__"]], "tno.quantum.optimization.qubo.solvers.SteepestDescentSolver": [[23, 2, 1, "", "__init__"]], "tno.quantum.optimization.qubo.solvers.TabuSolver": [[23, 2, 1, "", "__init__"]], "tno.quantum.optimization.qubo.solvers.TreeDecompositionSolver": [[23, 2, 1, "", "__init__"]], "tno.quantum.problems": [[27, 0, 0, "-", "portfolio_optimization"]], "tno.quantum.problems.portfolio_optimization": [[27, 1, 1, "", "PortfolioData"], [27, 1, 1, "", "PortfolioOptimizer"], [27, 1, 1, "", "QuboFactory"], [27, 5, 1, "", "plot_front"], [27, 5, 1, "", "plot_points"]], "tno.quantum.problems.portfolio_optimization.PortfolioData": [[27, 2, 1, "", "__contains__"], [27, 2, 1, "", "__init__"], [27, 2, 1, "", "__len__"], [27, 2, 1, "", "__repr__"], [27, 2, 1, "", "__str__"], [27, 2, 1, "", "from_file"], [27, 2, 1, "", "get_capital"], [27, 2, 1, "", "get_column"], [27, 2, 1, "", "get_income"], [27, 2, 1, "", "get_l_bound"], [27, 2, 1, "", "get_outstanding_now"], [27, 2, 1, "", "get_returns"], [27, 2, 1, "", "get_u_bound"], [27, 2, 1, "", "print_portfolio_info"]], "tno.quantum.problems.portfolio_optimization.PortfolioOptimizer": [[27, 2, 1, "", "__init__"], [27, 2, 1, "", "add_emission_constraint"], [27, 2, 1, "", "add_growth_factor_constraint"], [27, 2, 1, "", "add_maximize_roc"], [27, 2, 1, "", "add_minimize_hhi"], [27, 2, 1, "", "run"]], "tno.quantum.problems.portfolio_optimization.QuboFactory": [[27, 2, 1, "", "__init__"], [27, 2, 1, "", "calc_emission_constraint"], [27, 2, 1, "", "calc_growth_factor_constraint"], [27, 2, 1, "", "calc_maximize_roc1"], [27, 2, 1, "", "calc_maximize_roc2"], [27, 2, 1, "", "calc_minimize_hhi"], [27, 2, 1, "", "calc_stabilize_c"]], "tno.quantum.utils": [[24, 1, 1, "", "BackendConfig"], [24, 1, 1, "", "BaseArguments"], [24, 1, 1, "", "BaseConfig"], [24, 1, 1, "", "BitVector"], [24, 7, 1, "", "BitVectorLike"], [24, 1, 1, "", "OptimizerConfig"], [24, 5, 1, "", "convert_to_snake_case"], [24, 5, 1, "", "get_installed_subclasses"], [25, 0, 0, "-", "serialization"], [26, 0, 0, "-", "validation"]], "tno.quantum.utils.BackendConfig": [[24, 2, 1, "", "__init__"], [24, 2, 1, "", "supported_items"]], "tno.quantum.utils.BaseArguments": [[24, 2, 1, "", "__getitem__"], [24, 2, 1, "", "__iter__"], [24, 2, 1, "", "__len__"], [24, 2, 1, "", "from_mapping"]], "tno.quantum.utils.BaseConfig": [[24, 2, 1, "", "__init__"], [24, 2, 1, "", "get_instance"], [24, 4, 1, "", "name"], [24, 4, 1, "", "options"], [24, 2, 1, "", "prefix"], [24, 2, 1, "", "register_custom_item"], [24, 2, 1, "", "supported_custom_items"], [24, 2, 1, "", "supported_items"]], "tno.quantum.utils.BitVector": [[24, 2, 1, "", "__array__"], [24, 2, 1, "", "__eq__"], [24, 2, 1, "", "__getitem__"], [24, 2, 1, "", "__hash__"], [24, 2, 1, "", "__init__"], [24, 2, 1, "", "__iter__"], [24, 2, 1, "", "__len__"], [24, 2, 1, "", "__repr__"], [24, 2, 1, "", "__str__"], [24, 4, 1, "", "bits"], [24, 2, 1, "", "concatenate"], [24, 2, 1, "", "concatenate_bit_vectors"], [24, 2, 1, "", "flip_indices"], [24, 2, 1, "", "to_ising"]], "tno.quantum.utils.OptimizerConfig": [[24, 2, 1, "", "__init__"], [24, 2, 1, "", "supported_items"]], "tno.quantum.utils.serialization": [[25, 1, 1, "", "Serializable"], [25, 5, 1, "", "check_serializable"]], "tno.quantum.utils.serialization.Serializable": [[25, 2, 1, "", "deserialize"], [25, 2, 1, "", "from_json"], [25, 2, 1, "", "from_json_file"], [25, 2, 1, "", "from_yaml"], [25, 2, 1, "", "from_yaml_file"], [25, 2, 1, "", "register"], [25, 2, 1, "", "serialize"], [25, 2, 1, "", "to_json"], [25, 2, 1, "", "to_json_file"], [25, 2, 1, "", "to_yaml"], [25, 2, 1, "", "to_yaml_file"]], "tno.quantum.utils.validation": [[26, 5, 1, "", "check_arraylike"], [26, 5, 1, "", "check_ax"], [26, 5, 1, "", "check_binary"], [26, 5, 1, "", "check_bool"], [26, 5, 1, "", "check_instance"], [26, 5, 1, "", "check_int"], [26, 5, 1, "", "check_kwarglike"], [26, 5, 1, "", "check_lower_bound"], [26, 5, 1, "", "check_path"], [26, 5, 1, "", "check_python_variable"], [26, 5, 1, "", "check_random_state"], [26, 5, 1, "", "check_real"], [26, 5, 1, "", "check_snake_case"], [26, 5, 1, "", "check_string"], [26, 5, 1, "", "check_timedelta"], [26, 5, 1, "", "check_upper_bound"], [26, 5, 1, "", "warn_if_negative"], [26, 5, 1, "", "warn_if_positive"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:property", "5": "py:function", "6": "py:exception", "7": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"], "6": ["py", "exception", "Python exception"], "7": ["py", "data", "Python data"]}, "titleterms": {"qkd": 0, "kei": 0, "rate": 0, "requir": [0, 1, 2], "exampl": [0, 1, 2, 21, 22, 23, 27], "portfolio": 1, "optim": [1, 19, 20, 21, 22, 23], "variat": 2, "classifi": [2, 13, 14, 15, 16], "instal": 3, "option": 3, "depend": 3, "commun": [4, 5, 6, 7, 8, 9, 10, 11, 12], "qkd_key_rat": [4, 5, 6, 7, 8, 9, 10, 11, 12], "classic": [4, 5, 6, 7], "cascad": 4, "privacy_amplif": 6, "winnow": 7, "quantum": [9, 10, 11, 12, 15, 29], "bb84": 9, "bb84_single_photon": 10, "bbm92": 11, "ml": [13, 14, 15, 16, 17, 18], "vc": [13, 14, 15, 16], "basic": 13, "usag": [13, 15, 27], "backend": 13, "model": [14, 15, 16], "expected_value_model": 14, "develop": 15, "new": 15, "probability_model": 16, "class": 16, "assign": 16, "3": 16, "bit": 16, "4": 16, "dataset": [17, 27], "qubo": [19, 20, 21, 22, 23], "compon": 19, "postprocessor": 21, "preprocessor": 22, "solver": 23, "util": [24, 25, 26], "serial": 25, "valid": 26, "problem": 27, "portfolio_optim": 27, "data": 27, "input": 27, "about": [28, 29], "tno": [28, 29], "open": [28, 29], "sourc": [28, 29], "end": 29, "us": 29, "limit": 29}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"QKD key-rate": [[0, "qkd-key-rate"]], "Requirements": [[0, "requirements"], [1, "requirements"], [2, "requirements"]], "Examples": [[0, "examples"], [1, "examples"], [2, "examples"]], "Portfolio optimization": [[1, "portfolio-optimization"]], "Variational classifier": [[2, "variational-classifier"]], "Installation": [[3, "installation"]], "Optional dependencies": [[3, "optional-dependencies"]], "communication.qkd_key_rate.classical.cascade": [[4, "module-tno.quantum.communication.qkd_key_rate.classical.cascade"]], "communication.qkd_key_rate.classical": [[5, "module-tno.quantum.communication.qkd_key_rate.classical"]], "communication.qkd_key_rate.classical.privacy_amplification": [[6, "module-tno.quantum.communication.qkd_key_rate.classical.privacy_amplification"]], "communication.qkd_key_rate.classical.winnow": [[7, "module-tno.quantum.communication.qkd_key_rate.classical.winnow"]], "communication.qkd_key_rate": [[8, "communication-qkd-key-rate"]], "communication.qkd_key_rate.quantum.bb84": [[9, "module-tno.quantum.communication.qkd_key_rate.quantum.bb84"]], "communication.qkd_key_rate.quantum.bb84_single_photon": [[10, "module-tno.quantum.communication.qkd_key_rate.quantum.bb84_single_photon"]], "communication.qkd_key_rate.quantum.bbm92": [[11, "module-tno.quantum.communication.qkd_key_rate.quantum.bbm92"]], "communication.qkd_key_rate.quantum": [[12, "module-tno.quantum.communication.qkd_key_rate.quantum"]], "ml.classifiers.vc": [[13, "ml-classifiers-vc"]], "Basic usage": [[13, "basic-usage"]], "Backends": [[13, "backends"]], "ml.classifiers.vc.models.expected_value_model": [[14, "module-tno.quantum.ml.classifiers.vc.models.expected_value_model"]], "ml.classifiers.vc.models": [[15, "module-tno.quantum.ml.classifiers.vc.models"]], "Usage": [[15, "usage"]], "Developing New Quantum Models": [[15, "developing-new-quantum-models"]], "ml.classifiers.vc.models.probability_model": [[16, "module-tno.quantum.ml.classifiers.vc.models.probability_model"]], "Class Assignments (3 bits, 4 classes)": [[16, "id2"]], "ml.datasets": [[17, "ml-datasets"]], "ml": [[18, "ml"]], "optimization.qubo.components": [[19, "optimization-qubo-components"]], "optimization.qubo": [[20, "optimization-qubo"]], "optimization.qubo.postprocessors": [[21, "optimization-qubo-postprocessors"]], "Example:": [[21, "example"], [22, "example"], [23, "example"]], "optimization.qubo.preprocessors": [[22, "optimization-qubo-preprocessors"]], "optimization.qubo.solvers": [[23, "optimization-qubo-solvers"]], "utils": [[24, "utils"]], "utils.serialization": [[25, "module-tno.quantum.utils.serialization"]], "utils.validation": [[26, "module-tno.quantum.utils.validation"]], "problems.portfolio_optimization": [[27, "problems-portfolio-optimization"]], "Usage example:": [[27, "usage-example"]], "Data input": [[27, "data-input"]], "Example Dataset": [[27, "id2"]], "About TNO": [[28, "about-tno"], [29, "about-tno"]], "Open Source": [[28, "open-source"], [29, "open-source"]], "TNO Quantum": [[29, "tno-quantum"]], "(End)use Limitations": [[29, "end-use-limitations"]]}, "indexentries": {"cascadecorrector (class in tno.quantum.communication.qkd_key_rate.classical.cascade)": [[4, "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeCorrector"]], "cascadecorrectoroutput (class in tno.quantum.communication.qkd_key_rate.classical.cascade)": [[4, "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeCorrectorOutput"]], "cascadereceiver (class in tno.quantum.communication.qkd_key_rate.classical.cascade)": [[4, "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeReceiver"]], "cascadesender (class in tno.quantum.communication.qkd_key_rate.classical.cascade)": [[4, "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeSender"]], "__init__() (tno.quantum.communication.qkd_key_rate.classical.cascade.cascadecorrector method)": [[4, "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeCorrector.__init__"]], "__init__() (tno.quantum.communication.qkd_key_rate.classical.cascade.cascadereceiver method)": [[4, "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeReceiver.__init__"]], "__init__() (tno.quantum.communication.qkd_key_rate.classical.cascade.cascadesender method)": [[4, "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeSender.__init__"]], "check_match_of_parities() (tno.quantum.communication.qkd_key_rate.classical.cascade.cascadereceiver method)": [[4, "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeReceiver.check_match_of_parities"]], "correct_errors() (tno.quantum.communication.qkd_key_rate.classical.cascade.cascadereceiver method)": [[4, "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeReceiver.correct_errors"]], "do_cascade() (tno.quantum.communication.qkd_key_rate.classical.cascade.cascadereceiver method)": [[4, "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeReceiver.do_cascade"]], "get_block_index() (tno.quantum.communication.qkd_key_rate.classical.cascade.cascadereceiver method)": [[4, "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeReceiver.get_block_index"]], "get_error_index() (tno.quantum.communication.qkd_key_rate.classical.cascade.cascadereceiver method)": [[4, "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeReceiver.get_error_index"]], "get_error_rate() (tno.quantum.communication.qkd_key_rate.classical.cascade.cascadereceiver method)": [[4, "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeReceiver.get_error_rate"]], "get_parity() (tno.quantum.communication.qkd_key_rate.classical.cascade.cascadesender method)": [[4, "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeSender.get_parity"]], "get_prior_error_rate() (tno.quantum.communication.qkd_key_rate.classical.cascade.cascadereceiver method)": [[4, "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeReceiver.get_prior_error_rate"]], "module": [[4, "module-tno.quantum.communication.qkd_key_rate.classical.cascade"], [5, "module-tno.quantum.communication.qkd_key_rate.classical"], [6, "module-tno.quantum.communication.qkd_key_rate.classical.privacy_amplification"], [7, "module-tno.quantum.communication.qkd_key_rate.classical.winnow"], [8, "module-tno.quantum.communication.qkd_key_rate"], [9, "module-tno.quantum.communication.qkd_key_rate.quantum.bb84"], [10, "module-tno.quantum.communication.qkd_key_rate.quantum.bb84_single_photon"], [11, "module-tno.quantum.communication.qkd_key_rate.quantum.bbm92"], [12, "module-tno.quantum.communication.qkd_key_rate.quantum"], [13, "module-tno.quantum.ml.classifiers.vc"], [14, "module-tno.quantum.ml.classifiers.vc.models.expected_value_model"], [15, "module-tno.quantum.ml.classifiers.vc.models"], [16, "module-tno.quantum.ml.classifiers.vc.models.probability_model"], [17, "module-tno.quantum.ml.datasets"], [18, "module-tno.quantum.ml"], [19, "module-tno.quantum.optimization.qubo.components"], [20, "module-tno.quantum.optimization.qubo"], [21, "module-tno.quantum.optimization.qubo.postprocessors"], [22, "module-tno.quantum.optimization.qubo.preprocessors"], [23, "module-tno.quantum.optimization.qubo.solvers"], [24, "module-tno.quantum.utils"], [25, "module-tno.quantum.utils.serialization"], [26, "module-tno.quantum.utils.validation"], [27, "module-tno.quantum.problems.portfolio_optimization"]], "number_of_passes (tno.quantum.communication.qkd_key_rate.classical.cascade.cascadecorrectoroutput attribute)": [[4, "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeCorrectorOutput.number_of_passes"]], "sampling_fraction (tno.quantum.communication.qkd_key_rate.classical.cascade.cascadecorrectoroutput attribute)": [[4, "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeCorrectorOutput.sampling_fraction"]], "summary() (tno.quantum.communication.qkd_key_rate.classical.cascade.cascadecorrector method)": [[4, "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeCorrector.summary"]], "switch_after_pass (tno.quantum.communication.qkd_key_rate.classical.cascade.cascadecorrectoroutput attribute)": [[4, "tno.quantum.communication.qkd_key_rate.classical.cascade.CascadeCorrectorOutput.switch_after_pass"]], "tno.quantum.communication.qkd_key_rate.classical.cascade": [[4, "module-tno.quantum.communication.qkd_key_rate.classical.cascade"]], "corrector (class in tno.quantum.communication.qkd_key_rate.classical)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Corrector"]], "correctoroutputbase (class in tno.quantum.communication.qkd_key_rate.classical)": [[5, "tno.quantum.communication.qkd_key_rate.classical.CorrectorOutputBase"]], "message (class in tno.quantum.communication.qkd_key_rate.classical)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Message"]], "paritystrategy (class in tno.quantum.communication.qkd_key_rate.classical)": [[5, "tno.quantum.communication.qkd_key_rate.classical.ParityStrategy"]], "permutations (class in tno.quantum.communication.qkd_key_rate.classical)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Permutations"]], "receiverbase (class in tno.quantum.communication.qkd_key_rate.classical)": [[5, "tno.quantum.communication.qkd_key_rate.classical.ReceiverBase"]], "schedule (class in tno.quantum.communication.qkd_key_rate.classical)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Schedule"]], "senderbase (class in tno.quantum.communication.qkd_key_rate.classical)": [[5, "tno.quantum.communication.qkd_key_rate.classical.SenderBase"]], "__add__() (tno.quantum.communication.qkd_key_rate.classical.permutations method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Permutations.__add__"]], "__bytes__() (tno.quantum.communication.qkd_key_rate.classical.message method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Message.__bytes__"]], "__eq__() (tno.quantum.communication.qkd_key_rate.classical.permutations method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Permutations.__eq__"]], "__eq__() (tno.quantum.communication.qkd_key_rate.classical.schedule method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Schedule.__eq__"]], "__getitem__() (tno.quantum.communication.qkd_key_rate.classical.message method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Message.__getitem__"]], "__getitem__() (tno.quantum.communication.qkd_key_rate.classical.permutations method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Permutations.__getitem__"]], "__init__() (tno.quantum.communication.qkd_key_rate.classical.corrector method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Corrector.__init__"]], "__init__() (tno.quantum.communication.qkd_key_rate.classical.message method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Message.__init__"]], "__init__() (tno.quantum.communication.qkd_key_rate.classical.paritystrategy method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.ParityStrategy.__init__"]], "__init__() (tno.quantum.communication.qkd_key_rate.classical.permutations method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Permutations.__init__"]], "__init__() (tno.quantum.communication.qkd_key_rate.classical.receiverbase method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.ReceiverBase.__init__"]], "__init__() (tno.quantum.communication.qkd_key_rate.classical.schedule method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Schedule.__init__"]], "__init__() (tno.quantum.communication.qkd_key_rate.classical.senderbase method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.SenderBase.__init__"]], "__iter__() (tno.quantum.communication.qkd_key_rate.classical.message method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Message.__iter__"]], "__len__() (tno.quantum.communication.qkd_key_rate.classical.permutations method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Permutations.__len__"]], "__len__() (tno.quantum.communication.qkd_key_rate.classical.schedule method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Schedule.__len__"]], "__setitem__() (tno.quantum.communication.qkd_key_rate.classical.message method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Message.__setitem__"]], "__str__() (tno.quantum.communication.qkd_key_rate.classical.correctoroutputbase method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.CorrectorOutputBase.__str__"]], "__str__() (tno.quantum.communication.qkd_key_rate.classical.message method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Message.__str__"]], "__str__() (tno.quantum.communication.qkd_key_rate.classical.schedule method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Schedule.__str__"]], "apply_errors() (tno.quantum.communication.qkd_key_rate.classical.message method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Message.apply_errors"]], "apply_permutation() (tno.quantum.communication.qkd_key_rate.classical.message method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Message.apply_permutation"]], "calculate_error_rate() (tno.quantum.communication.qkd_key_rate.classical.corrector static method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Corrector.calculate_error_rate"]], "calculate_inverted_permutations() (tno.quantum.communication.qkd_key_rate.classical.permutations static method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Permutations.calculate_inverted_permutations"]], "calculate_key_reconciliation_rate() (tno.quantum.communication.qkd_key_rate.classical.corrector method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Corrector.calculate_key_reconciliation_rate"]], "calculate_message_parity_strategy() (tno.quantum.communication.qkd_key_rate.classical.paritystrategy method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.ParityStrategy.calculate_message_parity_strategy"]], "calculate_number_of_errors() (tno.quantum.communication.qkd_key_rate.classical.corrector static method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Corrector.calculate_number_of_errors"]], "compute_efficiency() (in module tno.quantum.communication.qkd_key_rate.classical)": [[5, "tno.quantum.communication.qkd_key_rate.classical.compute_efficiency"]], "compute_estimate_on_communication() (in module tno.quantum.communication.qkd_key_rate.classical)": [[5, "tno.quantum.communication.qkd_key_rate.classical.compute_estimate_on_communication"]], "correct_errors() (tno.quantum.communication.qkd_key_rate.classical.corrector method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Corrector.correct_errors"]], "correct_errors() (tno.quantum.communication.qkd_key_rate.classical.receiverbase method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.ReceiverBase.correct_errors"]], "correct_individual_error() (tno.quantum.communication.qkd_key_rate.classical.receiverbase method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.ReceiverBase.correct_individual_error"]], "create_message_tag_pair() (tno.quantum.communication.qkd_key_rate.classical.corrector static method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Corrector.create_message_tag_pair"]], "get_start_block_size() (tno.quantum.communication.qkd_key_rate.classical.paritystrategy method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.ParityStrategy.get_start_block_size"]], "input_alice (tno.quantum.communication.qkd_key_rate.classical.correctoroutputbase attribute)": [[5, "tno.quantum.communication.qkd_key_rate.classical.CorrectorOutputBase.input_alice"]], "input_bob (tno.quantum.communication.qkd_key_rate.classical.correctoroutputbase attribute)": [[5, "tno.quantum.communication.qkd_key_rate.classical.CorrectorOutputBase.input_bob"]], "input_error (tno.quantum.communication.qkd_key_rate.classical.correctoroutputbase attribute)": [[5, "tno.quantum.communication.qkd_key_rate.classical.CorrectorOutputBase.input_error"]], "key_reconciliation_rate (tno.quantum.communication.qkd_key_rate.classical.correctoroutputbase attribute)": [[5, "tno.quantum.communication.qkd_key_rate.classical.CorrectorOutputBase.key_reconciliation_rate"]], "length (tno.quantum.communication.qkd_key_rate.classical.message property)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Message.length"]], "message (tno.quantum.communication.qkd_key_rate.classical.message attribute)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Message.message"]], "message (tno.quantum.communication.qkd_key_rate.classical.senderbase property)": [[5, "tno.quantum.communication.qkd_key_rate.classical.SenderBase.message"]], "net_exposed_bits (tno.quantum.communication.qkd_key_rate.classical.senderbase property)": [[5, "tno.quantum.communication.qkd_key_rate.classical.SenderBase.net_exposed_bits"]], "next_pass() (tno.quantum.communication.qkd_key_rate.classical.schedule method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Schedule.next_pass"]], "number_of_communication_rounds (tno.quantum.communication.qkd_key_rate.classical.correctoroutputbase attribute)": [[5, "tno.quantum.communication.qkd_key_rate.classical.CorrectorOutputBase.number_of_communication_rounds"]], "number_of_exposed_bits (tno.quantum.communication.qkd_key_rate.classical.correctoroutputbase attribute)": [[5, "tno.quantum.communication.qkd_key_rate.classical.CorrectorOutputBase.number_of_exposed_bits"]], "number_of_exposed_bits (tno.quantum.communication.qkd_key_rate.classical.senderbase property)": [[5, "tno.quantum.communication.qkd_key_rate.classical.SenderBase.number_of_exposed_bits"]], "original_message (tno.quantum.communication.qkd_key_rate.classical.senderbase property)": [[5, "tno.quantum.communication.qkd_key_rate.classical.SenderBase.original_message"]], "output_alice (tno.quantum.communication.qkd_key_rate.classical.correctoroutputbase attribute)": [[5, "tno.quantum.communication.qkd_key_rate.classical.CorrectorOutputBase.output_alice"]], "output_bob (tno.quantum.communication.qkd_key_rate.classical.correctoroutputbase attribute)": [[5, "tno.quantum.communication.qkd_key_rate.classical.CorrectorOutputBase.output_bob"]], "output_error (tno.quantum.communication.qkd_key_rate.classical.correctoroutputbase attribute)": [[5, "tno.quantum.communication.qkd_key_rate.classical.CorrectorOutputBase.output_error"]], "output_length (tno.quantum.communication.qkd_key_rate.classical.correctoroutputbase attribute)": [[5, "tno.quantum.communication.qkd_key_rate.classical.CorrectorOutputBase.output_length"]], "pop() (tno.quantum.communication.qkd_key_rate.classical.message method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Message.pop"]], "random_message() (tno.quantum.communication.qkd_key_rate.classical.message class method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Message.random_message"]], "random_permutation() (tno.quantum.communication.qkd_key_rate.classical.permutations class method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Permutations.random_permutation"]], "remaining_passes (tno.quantum.communication.qkd_key_rate.classical.schedule property)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Schedule.remaining_passes"]], "schedule_from_error_rate() (tno.quantum.communication.qkd_key_rate.classical.schedule class method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Schedule.schedule_from_error_rate"]], "shorten_pass() (tno.quantum.communication.qkd_key_rate.classical.permutations method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Permutations.shorten_pass"]], "summary() (tno.quantum.communication.qkd_key_rate.classical.corrector method)": [[5, "tno.quantum.communication.qkd_key_rate.classical.Corrector.summary"]], "tno.quantum.communication.qkd_key_rate.classical": [[5, "module-tno.quantum.communication.qkd_key_rate.classical"]], "transcript (tno.quantum.communication.qkd_key_rate.classical.senderbase attribute)": [[5, "tno.quantum.communication.qkd_key_rate.classical.SenderBase.transcript"]], "privacyamplification (class in tno.quantum.communication.qkd_key_rate.classical.privacy_amplification)": [[6, "tno.quantum.communication.qkd_key_rate.classical.privacy_amplification.PrivacyAmplification"]], "__init__() (tno.quantum.communication.qkd_key_rate.classical.privacy_amplification.privacyamplification method)": [[6, "tno.quantum.communication.qkd_key_rate.classical.privacy_amplification.PrivacyAmplification.__init__"]], "do_hash() (tno.quantum.communication.qkd_key_rate.classical.privacy_amplification.privacyamplification method)": [[6, "tno.quantum.communication.qkd_key_rate.classical.privacy_amplification.PrivacyAmplification.do_hash"]], "get_entropy_estimate() (tno.quantum.communication.qkd_key_rate.classical.privacy_amplification.privacyamplification method)": [[6, "tno.quantum.communication.qkd_key_rate.classical.privacy_amplification.PrivacyAmplification.get_entropy_estimate"]], "tno.quantum.communication.qkd_key_rate.classical.privacy_amplification": [[6, "module-tno.quantum.communication.qkd_key_rate.classical.privacy_amplification"]], "winnowcorrector (class in tno.quantum.communication.qkd_key_rate.classical.winnow)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowCorrector"]], "winnowcorrectoroutput (class in tno.quantum.communication.qkd_key_rate.classical.winnow)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowCorrectorOutput"]], "winnowreceiver (class in tno.quantum.communication.qkd_key_rate.classical.winnow)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowReceiver"]], "winnowsender (class in tno.quantum.communication.qkd_key_rate.classical.winnow)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowSender"]], "__init__() (tno.quantum.communication.qkd_key_rate.classical.winnow.winnowcorrector method)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowCorrector.__init__"]], "__init__() (tno.quantum.communication.qkd_key_rate.classical.winnow.winnowreceiver method)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowReceiver.__init__"]], "__init__() (tno.quantum.communication.qkd_key_rate.classical.winnow.winnowsender method)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowSender.__init__"]], "build_parity_string() (tno.quantum.communication.qkd_key_rate.classical.winnow.winnowsender method)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowSender.build_parity_string"]], "build_syndrome_string() (tno.quantum.communication.qkd_key_rate.classical.winnow.winnowsender method)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowSender.build_syndrome_string"]], "correct_errors() (tno.quantum.communication.qkd_key_rate.classical.winnow.winnowreceiver method)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowReceiver.correct_errors"]], "create_parity_check_matrix() (tno.quantum.communication.qkd_key_rate.classical.winnow.winnowsender method)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowSender.create_parity_check_matrix"]], "disagreeing_block_parities() (tno.quantum.communication.qkd_key_rate.classical.winnow.winnowsender method)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowSender.disagreeing_block_parities"]], "discard_parity_bits() (tno.quantum.communication.qkd_key_rate.classical.winnow.winnowsender method)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowSender.discard_parity_bits"]], "discard_syndrome_bits() (tno.quantum.communication.qkd_key_rate.classical.winnow.winnowsender method)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowSender.discard_syndrome_bits"]], "first_pass() (tno.quantum.communication.qkd_key_rate.classical.winnow.winnowsender method)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowSender.first_pass"]], "fix_errors_with_syndrome() (tno.quantum.communication.qkd_key_rate.classical.winnow.winnowreceiver method)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowReceiver.fix_errors_with_syndrome"]], "get_parity() (tno.quantum.communication.qkd_key_rate.classical.winnow.winnowsender method)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowSender.get_parity"]], "get_syndrome() (tno.quantum.communication.qkd_key_rate.classical.winnow.winnowsender method)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowSender.get_syndrome"]], "next_pass() (tno.quantum.communication.qkd_key_rate.classical.winnow.winnowsender method)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowSender.next_pass"]], "permute_buffer() (tno.quantum.communication.qkd_key_rate.classical.winnow.winnowsender method)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowSender.permute_buffer"]], "schedule (tno.quantum.communication.qkd_key_rate.classical.winnow.winnowcorrectoroutput attribute)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowCorrectorOutput.schedule"]], "summary() (tno.quantum.communication.qkd_key_rate.classical.winnow.winnowcorrector method)": [[7, "tno.quantum.communication.qkd_key_rate.classical.winnow.WinnowCorrector.summary"]], "tno.quantum.communication.qkd_key_rate.classical.winnow": [[7, "module-tno.quantum.communication.qkd_key_rate.classical.winnow"]], "tno.quantum.communication.qkd_key_rate": [[8, "module-tno.quantum.communication.qkd_key_rate"]], "bb84asymptotickeyrateestimate (class in tno.quantum.communication.qkd_key_rate.quantum.bb84)": [[9, "tno.quantum.communication.qkd_key_rate.quantum.bb84.BB84AsymptoticKeyRateEstimate"]], "bb84finitekeyrateestimate (class in tno.quantum.communication.qkd_key_rate.quantum.bb84)": [[9, "tno.quantum.communication.qkd_key_rate.quantum.bb84.BB84FiniteKeyRateEstimate"]], "bb84fullyasymptotickeyrateestimate (class in tno.quantum.communication.qkd_key_rate.quantum.bb84)": [[9, "tno.quantum.communication.qkd_key_rate.quantum.bb84.BB84FullyAsymptoticKeyRateEstimate"]], "__init__() (tno.quantum.communication.qkd_key_rate.quantum.bb84.bb84asymptotickeyrateestimate method)": [[9, "tno.quantum.communication.qkd_key_rate.quantum.bb84.BB84AsymptoticKeyRateEstimate.__init__"]], "__init__() (tno.quantum.communication.qkd_key_rate.quantum.bb84.bb84finitekeyrateestimate method)": [[9, "tno.quantum.communication.qkd_key_rate.quantum.bb84.BB84FiniteKeyRateEstimate.__init__"]], "__init__() (tno.quantum.communication.qkd_key_rate.quantum.bb84.bb84fullyasymptotickeyrateestimate method)": [[9, "tno.quantum.communication.qkd_key_rate.quantum.bb84.BB84FullyAsymptoticKeyRateEstimate.__init__"]], "bound_f() (in module tno.quantum.communication.qkd_key_rate.quantum.bb84)": [[9, "tno.quantum.communication.qkd_key_rate.quantum.bb84.bound_f"]], "compute_gain_and_error_rate() (in module tno.quantum.communication.qkd_key_rate.quantum.bb84)": [[9, "tno.quantum.communication.qkd_key_rate.quantum.bb84.compute_gain_and_error_rate"]], "compute_rate() (tno.quantum.communication.qkd_key_rate.quantum.bb84.bb84asymptotickeyrateestimate method)": [[9, "tno.quantum.communication.qkd_key_rate.quantum.bb84.BB84AsymptoticKeyRateEstimate.compute_rate"]], "compute_rate() (tno.quantum.communication.qkd_key_rate.quantum.bb84.bb84finitekeyrateestimate method)": [[9, "tno.quantum.communication.qkd_key_rate.quantum.bb84.BB84FiniteKeyRateEstimate.compute_rate"]], "compute_rate() (tno.quantum.communication.qkd_key_rate.quantum.bb84.bb84fullyasymptotickeyrateestimate method)": [[9, "tno.quantum.communication.qkd_key_rate.quantum.bb84.BB84FullyAsymptoticKeyRateEstimate.compute_rate"]], "delta() (in module tno.quantum.communication.qkd_key_rate.quantum.bb84)": [[9, "tno.quantum.communication.qkd_key_rate.quantum.bb84.delta"]], "delta_ec() (in module tno.quantum.communication.qkd_key_rate.quantum.bb84)": [[9, "tno.quantum.communication.qkd_key_rate.quantum.bb84.delta_ec"]], "ensure_probability() (in module tno.quantum.communication.qkd_key_rate.quantum.bb84)": [[9, "tno.quantum.communication.qkd_key_rate.quantum.bb84.ensure_probability"]], "lower_bound_matrix_gain() (in module tno.quantum.communication.qkd_key_rate.quantum.bb84)": [[9, "tno.quantum.communication.qkd_key_rate.quantum.bb84.lower_bound_matrix_gain"]], "optimize_rate() (tno.quantum.communication.qkd_key_rate.quantum.bb84.bb84asymptotickeyrateestimate method)": [[9, "tno.quantum.communication.qkd_key_rate.quantum.bb84.BB84AsymptoticKeyRateEstimate.optimize_rate"]], "optimize_rate() (tno.quantum.communication.qkd_key_rate.quantum.bb84.bb84finitekeyrateestimate method)": [[9, "tno.quantum.communication.qkd_key_rate.quantum.bb84.BB84FiniteKeyRateEstimate.optimize_rate"]], "optimize_rate() (tno.quantum.communication.qkd_key_rate.quantum.bb84.bb84fullyasymptotickeyrateestimate method)": [[9, "tno.quantum.communication.qkd_key_rate.quantum.bb84.BB84FullyAsymptoticKeyRateEstimate.optimize_rate"]], "solve_finite_lp() (in module tno.quantum.communication.qkd_key_rate.quantum.bb84)": [[9, "tno.quantum.communication.qkd_key_rate.quantum.bb84.solve_finite_lp"]], "solve_lp() (in module tno.quantum.communication.qkd_key_rate.quantum.bb84)": [[9, "tno.quantum.communication.qkd_key_rate.quantum.bb84.solve_lp"]], "tno.quantum.communication.qkd_key_rate.quantum.bb84": [[9, "module-tno.quantum.communication.qkd_key_rate.quantum.bb84"]], "bb84singleasymptotickeyrateestimate (class in tno.quantum.communication.qkd_key_rate.quantum.bb84_single_photon)": [[10, "tno.quantum.communication.qkd_key_rate.quantum.bb84_single_photon.BB84SingleAsymptoticKeyRateEstimate"]], "__init__() (tno.quantum.communication.qkd_key_rate.quantum.bb84_single_photon.bb84singleasymptotickeyrateestimate method)": [[10, "tno.quantum.communication.qkd_key_rate.quantum.bb84_single_photon.BB84SingleAsymptoticKeyRateEstimate.__init__"]], "compute_gain_and_error_rate() (in module tno.quantum.communication.qkd_key_rate.quantum.bb84_single_photon)": [[10, "tno.quantum.communication.qkd_key_rate.quantum.bb84_single_photon.compute_gain_and_error_rate"]], "compute_rate() (tno.quantum.communication.qkd_key_rate.quantum.bb84_single_photon.bb84singleasymptotickeyrateestimate method)": [[10, "tno.quantum.communication.qkd_key_rate.quantum.bb84_single_photon.BB84SingleAsymptoticKeyRateEstimate.compute_rate"]], "optimize_rate() (tno.quantum.communication.qkd_key_rate.quantum.bb84_single_photon.bb84singleasymptotickeyrateestimate method)": [[10, "tno.quantum.communication.qkd_key_rate.quantum.bb84_single_photon.BB84SingleAsymptoticKeyRateEstimate.optimize_rate"]], "tno.quantum.communication.qkd_key_rate.quantum.bb84_single_photon": [[10, "module-tno.quantum.communication.qkd_key_rate.quantum.bb84_single_photon"]], "bbm92asymptotickeyrateestimate (class in tno.quantum.communication.qkd_key_rate.quantum.bbm92)": [[11, "tno.quantum.communication.qkd_key_rate.quantum.bbm92.BBM92AsymptoticKeyRateEstimate"]], "bbm92finitekeyrateestimate (class in tno.quantum.communication.qkd_key_rate.quantum.bbm92)": [[11, "tno.quantum.communication.qkd_key_rate.quantum.bbm92.BBM92FiniteKeyRateEstimate"]], "__init__() (tno.quantum.communication.qkd_key_rate.quantum.bbm92.bbm92asymptotickeyrateestimate method)": [[11, "tno.quantum.communication.qkd_key_rate.quantum.bbm92.BBM92AsymptoticKeyRateEstimate.__init__"]], "__init__() (tno.quantum.communication.qkd_key_rate.quantum.bbm92.bbm92finitekeyrateestimate method)": [[11, "tno.quantum.communication.qkd_key_rate.quantum.bbm92.BBM92FiniteKeyRateEstimate.__init__"]], "compute_gain_and_error_rate() (in module tno.quantum.communication.qkd_key_rate.quantum.bbm92)": [[11, "tno.quantum.communication.qkd_key_rate.quantum.bbm92.compute_gain_and_error_rate"]], "compute_rate() (tno.quantum.communication.qkd_key_rate.quantum.bbm92.bbm92asymptotickeyrateestimate method)": [[11, "tno.quantum.communication.qkd_key_rate.quantum.bbm92.BBM92AsymptoticKeyRateEstimate.compute_rate"]], "compute_rate() (tno.quantum.communication.qkd_key_rate.quantum.bbm92.bbm92finitekeyrateestimate method)": [[11, "tno.quantum.communication.qkd_key_rate.quantum.bbm92.BBM92FiniteKeyRateEstimate.compute_rate"]], "delta() (in module tno.quantum.communication.qkd_key_rate.quantum.bbm92)": [[11, "tno.quantum.communication.qkd_key_rate.quantum.bbm92.delta"]], "efficiency_channel() (in module tno.quantum.communication.qkd_key_rate.quantum.bbm92)": [[11, "tno.quantum.communication.qkd_key_rate.quantum.bbm92.efficiency_channel"]], "efficiency_system() (in module tno.quantum.communication.qkd_key_rate.quantum.bbm92)": [[11, "tno.quantum.communication.qkd_key_rate.quantum.bbm92.efficiency_system"]], "optimize_rate() (tno.quantum.communication.qkd_key_rate.quantum.bbm92.bbm92asymptotickeyrateestimate method)": [[11, "tno.quantum.communication.qkd_key_rate.quantum.bbm92.BBM92AsymptoticKeyRateEstimate.optimize_rate"]], "optimize_rate() (tno.quantum.communication.qkd_key_rate.quantum.bbm92.bbm92finitekeyrateestimate method)": [[11, "tno.quantum.communication.qkd_key_rate.quantum.bbm92.BBM92FiniteKeyRateEstimate.optimize_rate"]], "tno.quantum.communication.qkd_key_rate.quantum.bbm92": [[11, "module-tno.quantum.communication.qkd_key_rate.quantum.bbm92"]], "detector (class in tno.quantum.communication.qkd_key_rate.quantum)": [[12, "tno.quantum.communication.qkd_key_rate.quantum.Detector"]], "keyrate (class in tno.quantum.communication.qkd_key_rate.quantum)": [[12, "tno.quantum.communication.qkd_key_rate.quantum.KeyRate"]], "__init__() (tno.quantum.communication.qkd_key_rate.quantum.detector method)": [[12, "tno.quantum.communication.qkd_key_rate.quantum.Detector.__init__"]], "__init__() (tno.quantum.communication.qkd_key_rate.quantum.keyrate method)": [[12, "tno.quantum.communication.qkd_key_rate.quantum.KeyRate.__init__"]], "__repr__() (tno.quantum.communication.qkd_key_rate.quantum.detector method)": [[12, "tno.quantum.communication.qkd_key_rate.quantum.Detector.__repr__"]], "compute_rate() (tno.quantum.communication.qkd_key_rate.quantum.keyrate method)": [[12, "tno.quantum.communication.qkd_key_rate.quantum.KeyRate.compute_rate"]], "customise() (tno.quantum.communication.qkd_key_rate.quantum.detector method)": [[12, "tno.quantum.communication.qkd_key_rate.quantum.Detector.customise"]], "from_file() (tno.quantum.communication.qkd_key_rate.quantum.detector class method)": [[12, "tno.quantum.communication.qkd_key_rate.quantum.Detector.from_file"]], "get_parameters() (tno.quantum.communication.qkd_key_rate.quantum.detector method)": [[12, "tno.quantum.communication.qkd_key_rate.quantum.Detector.get_parameters"]], "optimize_rate() (tno.quantum.communication.qkd_key_rate.quantum.keyrate method)": [[12, "tno.quantum.communication.qkd_key_rate.quantum.KeyRate.optimize_rate"]], "required_fields (tno.quantum.communication.qkd_key_rate.quantum.detector attribute)": [[12, "tno.quantum.communication.qkd_key_rate.quantum.Detector.required_fields"]], "tno.quantum.communication.qkd_key_rate.quantum": [[12, "module-tno.quantum.communication.qkd_key_rate.quantum"]], "modelconfig (class in tno.quantum.ml.classifiers.vc)": [[13, "tno.quantum.ml.classifiers.vc.ModelConfig"]], "variationalclassifier (class in tno.quantum.ml.classifiers.vc)": [[13, "tno.quantum.ml.classifiers.vc.VariationalClassifier"]], "__init__() (tno.quantum.ml.classifiers.vc.modelconfig method)": [[13, "tno.quantum.ml.classifiers.vc.ModelConfig.__init__"]], "__init__() (tno.quantum.ml.classifiers.vc.variationalclassifier method)": [[13, "tno.quantum.ml.classifiers.vc.VariationalClassifier.__init__"]], "__sklearn_tags__() (tno.quantum.ml.classifiers.vc.variationalclassifier method)": [[13, "tno.quantum.ml.classifiers.vc.VariationalClassifier.__sklearn_tags__"]], "fit() (tno.quantum.ml.classifiers.vc.variationalclassifier method)": [[13, "tno.quantum.ml.classifiers.vc.VariationalClassifier.fit"]], "name (tno.quantum.ml.classifiers.vc.modelconfig attribute)": [[13, "tno.quantum.ml.classifiers.vc.ModelConfig.name"]], "options (tno.quantum.ml.classifiers.vc.modelconfig attribute)": [[13, "tno.quantum.ml.classifiers.vc.ModelConfig.options"]], "predict() (tno.quantum.ml.classifiers.vc.variationalclassifier method)": [[13, "tno.quantum.ml.classifiers.vc.VariationalClassifier.predict"]], "set_fit_request() (tno.quantum.ml.classifiers.vc.variationalclassifier method)": [[13, "tno.quantum.ml.classifiers.vc.VariationalClassifier.set_fit_request"]], "set_score_request() (tno.quantum.ml.classifiers.vc.variationalclassifier method)": [[13, "tno.quantum.ml.classifiers.vc.VariationalClassifier.set_score_request"]], "supported_items() (tno.quantum.ml.classifiers.vc.modelconfig static method)": [[13, "tno.quantum.ml.classifiers.vc.ModelConfig.supported_items"]], "tno.quantum.ml.classifiers.vc": [[13, "module-tno.quantum.ml.classifiers.vc"]], "expectedvaluemodel (class in tno.quantum.ml.classifiers.vc.models.expected_value_model)": [[14, "tno.quantum.ml.classifiers.vc.models.expected_value_model.ExpectedValueModel"]], "__init__() (tno.quantum.ml.classifiers.vc.models.expected_value_model.expectedvaluemodel method)": [[14, "tno.quantum.ml.classifiers.vc.models.expected_value_model.ExpectedValueModel.__init__"]], "backend (tno.quantum.ml.classifiers.vc.models.expected_value_model.expectedvaluemodel attribute)": [[14, "tno.quantum.ml.classifiers.vc.models.expected_value_model.ExpectedValueModel.backend"]], "get_init_weights() (tno.quantum.ml.classifiers.vc.models.expected_value_model.expectedvaluemodel method)": [[14, "tno.quantum.ml.classifiers.vc.models.expected_value_model.ExpectedValueModel.get_init_weights"]], "get_qfunc() (tno.quantum.ml.classifiers.vc.models.expected_value_model.expectedvaluemodel method)": [[14, "tno.quantum.ml.classifiers.vc.models.expected_value_model.ExpectedValueModel.get_qfunc"]], "n_classes (tno.quantum.ml.classifiers.vc.models.expected_value_model.expectedvaluemodel attribute)": [[14, "tno.quantum.ml.classifiers.vc.models.expected_value_model.ExpectedValueModel.n_classes"]], "n_layers (tno.quantum.ml.classifiers.vc.models.expected_value_model.expectedvaluemodel attribute)": [[14, "tno.quantum.ml.classifiers.vc.models.expected_value_model.ExpectedValueModel.n_layers"]], "n_trainable_sublayers (tno.quantum.ml.classifiers.vc.models.expected_value_model.expectedvaluemodel attribute)": [[14, "tno.quantum.ml.classifiers.vc.models.expected_value_model.ExpectedValueModel.n_trainable_sublayers"]], "preprocess() (tno.quantum.ml.classifiers.vc.models.expected_value_model.expectedvaluemodel method)": [[14, "tno.quantum.ml.classifiers.vc.models.expected_value_model.ExpectedValueModel.preprocess"]], "scaling (tno.quantum.ml.classifiers.vc.models.expected_value_model.expectedvaluemodel attribute)": [[14, "tno.quantum.ml.classifiers.vc.models.expected_value_model.ExpectedValueModel.scaling"]], "tno.quantum.ml.classifiers.vc.models.expected_value_model": [[14, "module-tno.quantum.ml.classifiers.vc.models.expected_value_model"]], "modelerror": [[15, "tno.quantum.ml.classifiers.vc.models.ModelError"]], "qmodel (class in tno.quantum.ml.classifiers.vc.models)": [[15, "tno.quantum.ml.classifiers.vc.models.QModel"]], "__init__() (tno.quantum.ml.classifiers.vc.models.modelerror method)": [[15, "tno.quantum.ml.classifiers.vc.models.ModelError.__init__"]], "__init__() (tno.quantum.ml.classifiers.vc.models.qmodel method)": [[15, "tno.quantum.ml.classifiers.vc.models.QModel.__init__"]], "get_init_weights() (tno.quantum.ml.classifiers.vc.models.qmodel method)": [[15, "tno.quantum.ml.classifiers.vc.models.QModel.get_init_weights"]], "get_qfunc() (tno.quantum.ml.classifiers.vc.models.qmodel method)": [[15, "tno.quantum.ml.classifiers.vc.models.QModel.get_qfunc"]], "preprocess() (tno.quantum.ml.classifiers.vc.models.qmodel method)": [[15, "tno.quantum.ml.classifiers.vc.models.QModel.preprocess"]], "tno.quantum.ml.classifiers.vc.models": [[15, "module-tno.quantum.ml.classifiers.vc.models"]], "modulomodel (class in tno.quantum.ml.classifiers.vc.models.probability_model)": [[16, "tno.quantum.ml.classifiers.vc.models.probability_model.ModuloModel"]], "paritymodel (class in tno.quantum.ml.classifiers.vc.models.probability_model)": [[16, "tno.quantum.ml.classifiers.vc.models.probability_model.ParityModel"]], "probabilitymodel (class in tno.quantum.ml.classifiers.vc.models.probability_model)": [[16, "tno.quantum.ml.classifiers.vc.models.probability_model.ProbabilityModel"]], "__init__() (tno.quantum.ml.classifiers.vc.models.probability_model.probabilitymodel method)": [[16, "tno.quantum.ml.classifiers.vc.models.probability_model.ProbabilityModel.__init__"]], "backend (tno.quantum.ml.classifiers.vc.models.probability_model.probabilitymodel attribute)": [[16, "tno.quantum.ml.classifiers.vc.models.probability_model.ProbabilityModel.backend"]], "get_init_weights() (tno.quantum.ml.classifiers.vc.models.probability_model.probabilitymodel method)": [[16, "tno.quantum.ml.classifiers.vc.models.probability_model.ProbabilityModel.get_init_weights"]], "get_qfunc() (tno.quantum.ml.classifiers.vc.models.probability_model.probabilitymodel method)": [[16, "tno.quantum.ml.classifiers.vc.models.probability_model.ProbabilityModel.get_qfunc"]], "n_classes (tno.quantum.ml.classifiers.vc.models.probability_model.probabilitymodel attribute)": [[16, "tno.quantum.ml.classifiers.vc.models.probability_model.ProbabilityModel.n_classes"]], "n_layers (tno.quantum.ml.classifiers.vc.models.probability_model.probabilitymodel attribute)": [[16, "tno.quantum.ml.classifiers.vc.models.probability_model.ProbabilityModel.n_layers"]], "n_trainable_sublayers (tno.quantum.ml.classifiers.vc.models.probability_model.probabilitymodel attribute)": [[16, "tno.quantum.ml.classifiers.vc.models.probability_model.ProbabilityModel.n_trainable_sublayers"]], "preprocess() (tno.quantum.ml.classifiers.vc.models.probability_model.probabilitymodel method)": [[16, "tno.quantum.ml.classifiers.vc.models.probability_model.ProbabilityModel.preprocess"]], "scaling (tno.quantum.ml.classifiers.vc.models.probability_model.probabilitymodel attribute)": [[16, "tno.quantum.ml.classifiers.vc.models.probability_model.ProbabilityModel.scaling"]], "tno.quantum.ml.classifiers.vc.models.probability_model": [[16, "module-tno.quantum.ml.classifiers.vc.models.probability_model"]], "get_anomalous_spiky_time_series_dataset() (in module tno.quantum.ml.datasets)": [[17, "tno.quantum.ml.datasets.get_anomalous_spiky_time_series_dataset"]], "get_blobs_clustering_dataset() (in module tno.quantum.ml.datasets)": [[17, "tno.quantum.ml.datasets.get_blobs_clustering_dataset"]], "get_circles_dataset() (in module tno.quantum.ml.datasets)": [[17, "tno.quantum.ml.datasets.get_circles_dataset"]], "get_iris_dataset() (in module tno.quantum.ml.datasets)": [[17, "tno.quantum.ml.datasets.get_iris_dataset"]], "get_linearly_separable_dataset() (in module tno.quantum.ml.datasets)": [[17, "tno.quantum.ml.datasets.get_linearly_separable_dataset"]], "get_moons_dataset() (in module tno.quantum.ml.datasets)": [[17, "tno.quantum.ml.datasets.get_moons_dataset"]], "get_wine_dataset() (in module tno.quantum.ml.datasets)": [[17, "tno.quantum.ml.datasets.get_wine_dataset"]], "tno.quantum.ml.datasets": [[17, "module-tno.quantum.ml.datasets"]], "tno.quantum.ml": [[18, "module-tno.quantum.ml"]], "basicresult (class in tno.quantum.optimization.qubo.components)": [[19, "tno.quantum.optimization.qubo.components.BasicResult"]], "freq (class in tno.quantum.optimization.qubo.components)": [[19, "tno.quantum.optimization.qubo.components.Freq"]], "partialsolution (class in tno.quantum.optimization.qubo.components)": [[19, "tno.quantum.optimization.qubo.components.PartialSolution"]], "postprocessor (class in tno.quantum.optimization.qubo.components)": [[19, "tno.quantum.optimization.qubo.components.Postprocessor"]], "postprocessorconfig (class in tno.quantum.optimization.qubo.components)": [[19, "tno.quantum.optimization.qubo.components.PostprocessorConfig"]], "preprocessor (class in tno.quantum.optimization.qubo.components)": [[19, "tno.quantum.optimization.qubo.components.Preprocessor"]], "preprocessorconfig (class in tno.quantum.optimization.qubo.components)": [[19, "tno.quantum.optimization.qubo.components.PreprocessorConfig"]], "qubo (class in tno.quantum.optimization.qubo.components)": [[19, "tno.quantum.optimization.qubo.components.QUBO"]], "resultinterface (class in tno.quantum.optimization.qubo.components)": [[19, "tno.quantum.optimization.qubo.components.ResultInterface"]], "solver (class in tno.quantum.optimization.qubo.components)": [[19, "tno.quantum.optimization.qubo.components.Solver"]], "solverconfig (class in tno.quantum.optimization.qubo.components)": [[19, "tno.quantum.optimization.qubo.components.SolverConfig"]], "__add__() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.__add__"]], "__eq__() (tno.quantum.optimization.qubo.components.basicresult method)": [[19, "tno.quantum.optimization.qubo.components.BasicResult.__eq__"]], "__eq__() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.__eq__"]], "__init__() (tno.quantum.optimization.qubo.components.freq method)": [[19, "tno.quantum.optimization.qubo.components.Freq.__init__"]], "__init__() (tno.quantum.optimization.qubo.components.partialsolution method)": [[19, "tno.quantum.optimization.qubo.components.PartialSolution.__init__"]], "__init__() (tno.quantum.optimization.qubo.components.postprocessorconfig method)": [[19, "tno.quantum.optimization.qubo.components.PostprocessorConfig.__init__"]], "__init__() (tno.quantum.optimization.qubo.components.preprocessorconfig method)": [[19, "tno.quantum.optimization.qubo.components.PreprocessorConfig.__init__"]], "__init__() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.__init__"]], "__init__() (tno.quantum.optimization.qubo.components.resultinterface method)": [[19, "tno.quantum.optimization.qubo.components.ResultInterface.__init__"]], "__init__() (tno.quantum.optimization.qubo.components.solverconfig method)": [[19, "tno.quantum.optimization.qubo.components.SolverConfig.__init__"]], "__iter__() (tno.quantum.optimization.qubo.components.freq method)": [[19, "tno.quantum.optimization.qubo.components.Freq.__iter__"]], "__len__() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.__len__"]], "__mul__() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.__mul__"]], "__repr__() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.__repr__"]], "__rmul__() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.__rmul__"]], "__sub__() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.__sub__"]], "__truediv__() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.__truediv__"]], "apply() (tno.quantum.optimization.qubo.components.partialsolution method)": [[19, "tno.quantum.optimization.qubo.components.PartialSolution.apply"]], "assign_value() (tno.quantum.optimization.qubo.components.partialsolution method)": [[19, "tno.quantum.optimization.qubo.components.PartialSolution.assign_value"]], "assign_variable() (tno.quantum.optimization.qubo.components.partialsolution method)": [[19, "tno.quantum.optimization.qubo.components.PartialSolution.assign_variable"]], "best_bitvector (tno.quantum.optimization.qubo.components.resultinterface property)": [[19, "tno.quantum.optimization.qubo.components.ResultInterface.best_bitvector"]], "best_value (tno.quantum.optimization.qubo.components.resultinterface property)": [[19, "tno.quantum.optimization.qubo.components.ResultInterface.best_value"]], "bitvectors (tno.quantum.optimization.qubo.components.freq attribute)": [[19, "tno.quantum.optimization.qubo.components.Freq.bitvectors"]], "check_linear_equality_constraint() (tno.quantum.optimization.qubo.components.resultinterface method)": [[19, "tno.quantum.optimization.qubo.components.ResultInterface.check_linear_equality_constraint"]], "check_linear_inequality_constraint() (tno.quantum.optimization.qubo.components.resultinterface method)": [[19, "tno.quantum.optimization.qubo.components.ResultInterface.check_linear_inequality_constraint"]], "check_valid() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.check_valid"]], "compute_bounds() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.compute_bounds"]], "delta_x() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.delta_x"]], "delta_x2() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.delta_x2"]], "eig() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.eig"]], "energies (tno.quantum.optimization.qubo.components.freq attribute)": [[19, "tno.quantum.optimization.qubo.components.Freq.energies"]], "evaluate() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.evaluate"]], "evaluate_weighted() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.evaluate_weighted"]], "execution_time (tno.quantum.optimization.qubo.components.resultinterface property)": [[19, "tno.quantum.optimization.qubo.components.ResultInterface.execution_time"]], "expand() (tno.quantum.optimization.qubo.components.partialsolution method)": [[19, "tno.quantum.optimization.qubo.components.PartialSolution.expand"]], "free_variables() (tno.quantum.optimization.qubo.components.partialsolution method)": [[19, "tno.quantum.optimization.qubo.components.PartialSolution.free_variables"]], "freq (tno.quantum.optimization.qubo.components.resultinterface property)": [[19, "tno.quantum.optimization.qubo.components.ResultInterface.freq"]], "from_bqm() (tno.quantum.optimization.qubo.components.qubo class method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.from_bqm"]], "from_result() (tno.quantum.optimization.qubo.components.basicresult class method)": [[19, "tno.quantum.optimization.qubo.components.BasicResult.from_result"]], "from_result() (tno.quantum.optimization.qubo.components.resultinterface class method)": [[19, "tno.quantum.optimization.qubo.components.ResultInterface.from_result"]], "get_energy_quantiles() (tno.quantum.optimization.qubo.components.resultinterface method)": [[19, "tno.quantum.optimization.qubo.components.ResultInterface.get_energy_quantiles"]], "get_hist_bin_data() (tno.quantum.optimization.qubo.components.resultinterface method)": [[19, "tno.quantum.optimization.qubo.components.ResultInterface.get_hist_bin_data"]], "lower_bound (tno.quantum.optimization.qubo.components.qubo property)": [[19, "tno.quantum.optimization.qubo.components.QUBO.lower_bound"]], "matrix (tno.quantum.optimization.qubo.components.qubo property)": [[19, "tno.quantum.optimization.qubo.components.QUBO.matrix"]], "n (tno.quantum.optimization.qubo.components.partialsolution property)": [[19, "tno.quantum.optimization.qubo.components.PartialSolution.n"]], "negate() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.negate"]], "non_deterministic (tno.quantum.optimization.qubo.components.solver attribute)": [[19, "tno.quantum.optimization.qubo.components.Solver.non_deterministic"]], "num_attempts (tno.quantum.optimization.qubo.components.resultinterface property)": [[19, "tno.quantum.optimization.qubo.components.ResultInterface.num_attempts"]], "num_occurrences (tno.quantum.optimization.qubo.components.freq attribute)": [[19, "tno.quantum.optimization.qubo.components.Freq.num_occurrences"]], "offset (tno.quantum.optimization.qubo.components.qubo property)": [[19, "tno.quantum.optimization.qubo.components.QUBO.offset"]], "plot_hist() (tno.quantum.optimization.qubo.components.resultinterface method)": [[19, "tno.quantum.optimization.qubo.components.ResultInterface.plot_hist"]], "postprocess() (tno.quantum.optimization.qubo.components.postprocessor method)": [[19, "tno.quantum.optimization.qubo.components.Postprocessor.postprocess"]], "preprocess() (tno.quantum.optimization.qubo.components.preprocessor method)": [[19, "tno.quantum.optimization.qubo.components.Preprocessor.preprocess"]], "size (tno.quantum.optimization.qubo.components.qubo property)": [[19, "tno.quantum.optimization.qubo.components.QUBO.size"]], "solve() (tno.quantum.optimization.qubo.components.solver method)": [[19, "tno.quantum.optimization.qubo.components.Solver.solve"]], "spectral_gap() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.spectral_gap"]], "supported_items() (tno.quantum.optimization.qubo.components.postprocessorconfig static method)": [[19, "tno.quantum.optimization.qubo.components.PostprocessorConfig.supported_items"]], "supported_items() (tno.quantum.optimization.qubo.components.preprocessorconfig static method)": [[19, "tno.quantum.optimization.qubo.components.PreprocessorConfig.supported_items"]], "supported_items() (tno.quantum.optimization.qubo.components.solverconfig static method)": [[19, "tno.quantum.optimization.qubo.components.SolverConfig.supported_items"]], "tno.quantum.optimization.qubo.components": [[19, "module-tno.quantum.optimization.qubo.components"]], "to_bqm() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.to_bqm"]], "to_ising() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.to_ising"]], "to_string() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.to_string"]], "to_symmetric_form() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.to_symmetric_form"]], "to_upper_tri_form() (tno.quantum.optimization.qubo.components.qubo method)": [[19, "tno.quantum.optimization.qubo.components.QUBO.to_upper_tri_form"]], "upper_bound (tno.quantum.optimization.qubo.components.qubo property)": [[19, "tno.quantum.optimization.qubo.components.QUBO.upper_bound"]], "postprocessorconfig (class in tno.quantum.optimization.qubo)": [[20, "tno.quantum.optimization.qubo.PostprocessorConfig"]], "preprocessorconfig (class in tno.quantum.optimization.qubo)": [[20, "tno.quantum.optimization.qubo.PreprocessorConfig"]], "qubo (class in tno.quantum.optimization.qubo)": [[20, "tno.quantum.optimization.qubo.QUBO"]], "solverconfig (class in tno.quantum.optimization.qubo)": [[20, "tno.quantum.optimization.qubo.SolverConfig"]], "__add__() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.__add__"]], "__eq__() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.__eq__"]], "__init__() (tno.quantum.optimization.qubo.postprocessorconfig method)": [[20, "tno.quantum.optimization.qubo.PostprocessorConfig.__init__"]], "__init__() (tno.quantum.optimization.qubo.preprocessorconfig method)": [[20, "tno.quantum.optimization.qubo.PreprocessorConfig.__init__"]], "__init__() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.__init__"]], "__init__() (tno.quantum.optimization.qubo.solverconfig method)": [[20, "tno.quantum.optimization.qubo.SolverConfig.__init__"]], "__len__() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.__len__"]], "__mul__() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.__mul__"]], "__repr__() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.__repr__"]], "__rmul__() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.__rmul__"]], "__sub__() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.__sub__"]], "__truediv__() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.__truediv__"]], "check_valid() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.check_valid"]], "compute_bounds() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.compute_bounds"]], "delta_x() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.delta_x"]], "delta_x2() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.delta_x2"]], "eig() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.eig"]], "evaluate() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.evaluate"]], "evaluate_weighted() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.evaluate_weighted"]], "from_bqm() (tno.quantum.optimization.qubo.qubo class method)": [[20, "tno.quantum.optimization.qubo.QUBO.from_bqm"]], "lower_bound (tno.quantum.optimization.qubo.qubo property)": [[20, "tno.quantum.optimization.qubo.QUBO.lower_bound"]], "matrix (tno.quantum.optimization.qubo.qubo property)": [[20, "tno.quantum.optimization.qubo.QUBO.matrix"]], "negate() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.negate"]], "offset (tno.quantum.optimization.qubo.qubo property)": [[20, "tno.quantum.optimization.qubo.QUBO.offset"]], "size (tno.quantum.optimization.qubo.qubo property)": [[20, "tno.quantum.optimization.qubo.QUBO.size"]], "spectral_gap() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.spectral_gap"]], "supported_items() (tno.quantum.optimization.qubo.postprocessorconfig static method)": [[20, "tno.quantum.optimization.qubo.PostprocessorConfig.supported_items"]], "supported_items() (tno.quantum.optimization.qubo.preprocessorconfig static method)": [[20, "tno.quantum.optimization.qubo.PreprocessorConfig.supported_items"]], "supported_items() (tno.quantum.optimization.qubo.solverconfig static method)": [[20, "tno.quantum.optimization.qubo.SolverConfig.supported_items"]], "tno.quantum.optimization.qubo": [[20, "module-tno.quantum.optimization.qubo"]], "to_bqm() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.to_bqm"]], "to_ising() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.to_ising"]], "to_string() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.to_string"]], "to_symmetric_form() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.to_symmetric_form"]], "to_upper_tri_form() (tno.quantum.optimization.qubo.qubo method)": [[20, "tno.quantum.optimization.qubo.QUBO.to_upper_tri_form"]], "upper_bound (tno.quantum.optimization.qubo.qubo property)": [[20, "tno.quantum.optimization.qubo.QUBO.upper_bound"]], "steepestdescentpostprocessor (class in tno.quantum.optimization.qubo.postprocessors)": [[21, "tno.quantum.optimization.qubo.postprocessors.SteepestDescentPostprocessor"]], "__init__() (tno.quantum.optimization.qubo.postprocessors.steepestdescentpostprocessor method)": [[21, "tno.quantum.optimization.qubo.postprocessors.SteepestDescentPostprocessor.__init__"]], "num_reads (tno.quantum.optimization.qubo.postprocessors.steepestdescentpostprocessor property)": [[21, "tno.quantum.optimization.qubo.postprocessors.SteepestDescentPostprocessor.num_reads"]], "random_state (tno.quantum.optimization.qubo.postprocessors.steepestdescentpostprocessor property)": [[21, "tno.quantum.optimization.qubo.postprocessors.SteepestDescentPostprocessor.random_state"]], "sample_kwargs (tno.quantum.optimization.qubo.postprocessors.steepestdescentpostprocessor property)": [[21, "tno.quantum.optimization.qubo.postprocessors.SteepestDescentPostprocessor.sample_kwargs"]], "tno.quantum.optimization.qubo.postprocessors": [[21, "module-tno.quantum.optimization.qubo.postprocessors"]], "qpropluspreprocessor (class in tno.quantum.optimization.qubo.preprocessors)": [[22, "tno.quantum.optimization.qubo.preprocessors.QProPlusPreprocessor"]], "__init__() (tno.quantum.optimization.qubo.preprocessors.qpropluspreprocessor method)": [[22, "tno.quantum.optimization.qubo.preprocessors.QProPlusPreprocessor.__init__"]], "is_converged (tno.quantum.optimization.qubo.preprocessors.qpropluspreprocessor attribute)": [[22, "tno.quantum.optimization.qubo.preprocessors.QProPlusPreprocessor.is_converged"]], "preprocess() (tno.quantum.optimization.qubo.preprocessors.qpropluspreprocessor method)": [[22, "tno.quantum.optimization.qubo.preprocessors.QProPlusPreprocessor.preprocess"]], "tno.quantum.optimization.qubo.preprocessors": [[22, "module-tno.quantum.optimization.qubo.preprocessors"]], "customsolver (class in tno.quantum.optimization.qubo.solvers)": [[23, "tno.quantum.optimization.qubo.solvers.CustomSolver"]], "dwavecliquesamplersolver (class in tno.quantum.optimization.qubo.solvers)": [[23, "tno.quantum.optimization.qubo.solvers.DWaveCliqueSamplerSolver"]], "dwavesamplersolver (class in tno.quantum.optimization.qubo.solvers)": [[23, "tno.quantum.optimization.qubo.solvers.DWaveSamplerSolver"]], "dimodsamplesetresult (class in tno.quantum.optimization.qubo.solvers)": [[23, "tno.quantum.optimization.qubo.solvers.DimodSampleSetResult"]], "exactsamplersolver (class in tno.quantum.optimization.qubo.solvers)": [[23, "tno.quantum.optimization.qubo.solvers.ExactSamplerSolver"]], "iterativeresult (class in tno.quantum.optimization.qubo.solvers)": [[23, "tno.quantum.optimization.qubo.solvers.IterativeResult"]], "kerberossamplersolver (class in tno.quantum.optimization.qubo.solvers)": [[23, "tno.quantum.optimization.qubo.solvers.KerberosSamplerSolver"]], "leaphybridsolver (class in tno.quantum.optimization.qubo.solvers)": [[23, "tno.quantum.optimization.qubo.solvers.LeapHybridSolver"]], "neighborhoodsolver (class in tno.quantum.optimization.qubo.solvers)": [[23, "tno.quantum.optimization.qubo.solvers.NeighborhoodSolver"]], "pipelineresult (class in tno.quantum.optimization.qubo.solvers)": [[23, "tno.quantum.optimization.qubo.solvers.PipelineResult"]], "pipelinesolver (class in tno.quantum.optimization.qubo.solvers)": [[23, "tno.quantum.optimization.qubo.solvers.PipelineSolver"]], "preprocessresult (class in tno.quantum.optimization.qubo.solvers)": [[23, "tno.quantum.optimization.qubo.solvers.PreprocessResult"]], "qaoaresult (class in tno.quantum.optimization.qubo.solvers)": [[23, "tno.quantum.optimization.qubo.solvers.QAOAResult"]], "qaoasolver (class in tno.quantum.optimization.qubo.solvers)": [[23, "tno.quantum.optimization.qubo.solvers.QAOASolver"]], "rssolver (class in tno.quantum.optimization.qubo.solvers)": [[23, "tno.quantum.optimization.qubo.solvers.RSSolver"]], "randomsamplersolver (class in tno.quantum.optimization.qubo.solvers)": [[23, "tno.quantum.optimization.qubo.solvers.RandomSamplerSolver"]], "simulatedannealingsolver (class in tno.quantum.optimization.qubo.solvers)": [[23, "tno.quantum.optimization.qubo.solvers.SimulatedAnnealingSolver"]], "steepestdescentsolver (class in tno.quantum.optimization.qubo.solvers)": [[23, "tno.quantum.optimization.qubo.solvers.SteepestDescentSolver"]], "tabusolver (class in tno.quantum.optimization.qubo.solvers)": [[23, "tno.quantum.optimization.qubo.solvers.TabuSolver"]], "treedecompositionsolver (class in tno.quantum.optimization.qubo.solvers)": [[23, "tno.quantum.optimization.qubo.solvers.TreeDecompositionSolver"]], "__eq__() (tno.quantum.optimization.qubo.solvers.preprocessresult method)": [[23, "tno.quantum.optimization.qubo.solvers.PreprocessResult.__eq__"]], "__init__() (tno.quantum.optimization.qubo.solvers.customsolver method)": [[23, "tno.quantum.optimization.qubo.solvers.CustomSolver.__init__"]], "__init__() (tno.quantum.optimization.qubo.solvers.dwavecliquesamplersolver method)": [[23, "tno.quantum.optimization.qubo.solvers.DWaveCliqueSamplerSolver.__init__"]], "__init__() (tno.quantum.optimization.qubo.solvers.dwavesamplersolver method)": [[23, "tno.quantum.optimization.qubo.solvers.DWaveSamplerSolver.__init__"]], "__init__() (tno.quantum.optimization.qubo.solvers.dimodsamplesetresult method)": [[23, "tno.quantum.optimization.qubo.solvers.DimodSampleSetResult.__init__"]], "__init__() (tno.quantum.optimization.qubo.solvers.exactsamplersolver method)": [[23, "tno.quantum.optimization.qubo.solvers.ExactSamplerSolver.__init__"]], "__init__() (tno.quantum.optimization.qubo.solvers.kerberossamplersolver method)": [[23, "tno.quantum.optimization.qubo.solvers.KerberosSamplerSolver.__init__"]], "__init__() (tno.quantum.optimization.qubo.solvers.leaphybridsolver method)": [[23, "tno.quantum.optimization.qubo.solvers.LeapHybridSolver.__init__"]], "__init__() (tno.quantum.optimization.qubo.solvers.neighborhoodsolver method)": [[23, "tno.quantum.optimization.qubo.solvers.NeighborhoodSolver.__init__"]], "__init__() (tno.quantum.optimization.qubo.solvers.pipelineresult method)": [[23, "tno.quantum.optimization.qubo.solvers.PipelineResult.__init__"]], "__init__() (tno.quantum.optimization.qubo.solvers.pipelinesolver method)": [[23, "tno.quantum.optimization.qubo.solvers.PipelineSolver.__init__"]], "__init__() (tno.quantum.optimization.qubo.solvers.preprocessresult method)": [[23, "tno.quantum.optimization.qubo.solvers.PreprocessResult.__init__"]], "__init__() (tno.quantum.optimization.qubo.solvers.qaoaresult method)": [[23, "tno.quantum.optimization.qubo.solvers.QAOAResult.__init__"]], "__init__() (tno.quantum.optimization.qubo.solvers.qaoasolver method)": [[23, "tno.quantum.optimization.qubo.solvers.QAOASolver.__init__"]], "__init__() (tno.quantum.optimization.qubo.solvers.rssolver method)": [[23, "tno.quantum.optimization.qubo.solvers.RSSolver.__init__"]], "__init__() (tno.quantum.optimization.qubo.solvers.randomsamplersolver method)": [[23, "tno.quantum.optimization.qubo.solvers.RandomSamplerSolver.__init__"]], "__init__() (tno.quantum.optimization.qubo.solvers.simulatedannealingsolver method)": [[23, "tno.quantum.optimization.qubo.solvers.SimulatedAnnealingSolver.__init__"]], "__init__() (tno.quantum.optimization.qubo.solvers.steepestdescentsolver method)": [[23, "tno.quantum.optimization.qubo.solvers.SteepestDescentSolver.__init__"]], "__init__() (tno.quantum.optimization.qubo.solvers.tabusolver method)": [[23, "tno.quantum.optimization.qubo.solvers.TabuSolver.__init__"]], "__init__() (tno.quantum.optimization.qubo.solvers.treedecompositionsolver method)": [[23, "tno.quantum.optimization.qubo.solvers.TreeDecompositionSolver.__init__"]], "evaluation_backend (tno.quantum.optimization.qubo.solvers.qaoasolver property)": [[23, "tno.quantum.optimization.qubo.solvers.QAOASolver.evaluation_backend"]], "from_result() (tno.quantum.optimization.qubo.solvers.dimodsamplesetresult class method)": [[23, "tno.quantum.optimization.qubo.solvers.DimodSampleSetResult.from_result"]], "from_result() (tno.quantum.optimization.qubo.solvers.iterativeresult class method)": [[23, "tno.quantum.optimization.qubo.solvers.IterativeResult.from_result"]], "from_result() (tno.quantum.optimization.qubo.solvers.pipelineresult class method)": [[23, "tno.quantum.optimization.qubo.solvers.PipelineResult.from_result"]], "from_result() (tno.quantum.optimization.qubo.solvers.preprocessresult class method)": [[23, "tno.quantum.optimization.qubo.solvers.PreprocessResult.from_result"]], "from_result() (tno.quantum.optimization.qubo.solvers.qaoaresult class method)": [[23, "tno.quantum.optimization.qubo.solvers.QAOAResult.from_result"]], "init_beta (tno.quantum.optimization.qubo.solvers.qaoasolver property)": [[23, "tno.quantum.optimization.qubo.solvers.QAOASolver.init_beta"]], "init_gamma (tno.quantum.optimization.qubo.solvers.qaoasolver property)": [[23, "tno.quantum.optimization.qubo.solvers.QAOASolver.init_gamma"]], "non_deterministic (tno.quantum.optimization.qubo.solvers.customsolver attribute)": [[23, "tno.quantum.optimization.qubo.solvers.CustomSolver.non_deterministic"]], "non_deterministic (tno.quantum.optimization.qubo.solvers.dwavecliquesamplersolver attribute)": [[23, "tno.quantum.optimization.qubo.solvers.DWaveCliqueSamplerSolver.non_deterministic"]], "non_deterministic (tno.quantum.optimization.qubo.solvers.dwavesamplersolver attribute)": [[23, "tno.quantum.optimization.qubo.solvers.DWaveSamplerSolver.non_deterministic"]], "non_deterministic (tno.quantum.optimization.qubo.solvers.kerberossamplersolver attribute)": [[23, "tno.quantum.optimization.qubo.solvers.KerberosSamplerSolver.non_deterministic"]], "non_deterministic (tno.quantum.optimization.qubo.solvers.leaphybridsolver attribute)": [[23, "tno.quantum.optimization.qubo.solvers.LeapHybridSolver.non_deterministic"]], "num_iter (tno.quantum.optimization.qubo.solvers.qaoasolver property)": [[23, "tno.quantum.optimization.qubo.solvers.QAOASolver.num_iter"]], "num_iterations (tno.quantum.optimization.qubo.solvers.iterativeresult property)": [[23, "tno.quantum.optimization.qubo.solvers.IterativeResult.num_iterations"]], "num_layers (tno.quantum.optimization.qubo.solvers.qaoasolver property)": [[23, "tno.quantum.optimization.qubo.solvers.QAOASolver.num_layers"]], "optimizer (tno.quantum.optimization.qubo.solvers.qaoasolver property)": [[23, "tno.quantum.optimization.qubo.solvers.QAOASolver.optimizer"]], "partial_solution (tno.quantum.optimization.qubo.solvers.preprocessresult property)": [[23, "tno.quantum.optimization.qubo.solvers.PreprocessResult.partial_solution"]], "plot_expval_history() (tno.quantum.optimization.qubo.solvers.qaoaresult method)": [[23, "tno.quantum.optimization.qubo.solvers.QAOAResult.plot_expval_history"]], "plot_parameters() (tno.quantum.optimization.qubo.solvers.qaoaresult method)": [[23, "tno.quantum.optimization.qubo.solvers.QAOAResult.plot_parameters"]], "plot_shots_histogram() (tno.quantum.optimization.qubo.solvers.qaoaresult method)": [[23, "tno.quantum.optimization.qubo.solvers.QAOAResult.plot_shots_histogram"]], "tno.quantum.optimization.qubo.solvers": [[23, "module-tno.quantum.optimization.qubo.solvers"]], "training_backend (tno.quantum.optimization.qubo.solvers.qaoasolver property)": [[23, "tno.quantum.optimization.qubo.solvers.QAOASolver.training_backend"]], "verbose (tno.quantum.optimization.qubo.solvers.qaoasolver property)": [[23, "tno.quantum.optimization.qubo.solvers.QAOASolver.verbose"]], "backendconfig (class in tno.quantum.utils)": [[24, "tno.quantum.utils.BackendConfig"]], "basearguments (class in tno.quantum.utils)": [[24, "tno.quantum.utils.BaseArguments"]], "baseconfig (class in tno.quantum.utils)": [[24, "tno.quantum.utils.BaseConfig"]], "bitvector (class in tno.quantum.utils)": [[24, "tno.quantum.utils.BitVector"]], "bitvectorlike (in module tno.quantum.utils)": [[24, "tno.quantum.utils.BitVectorLike"]], "optimizerconfig (class in tno.quantum.utils)": [[24, "tno.quantum.utils.OptimizerConfig"]], "__array__() (tno.quantum.utils.bitvector method)": [[24, "tno.quantum.utils.BitVector.__array__"]], "__eq__() (tno.quantum.utils.bitvector method)": [[24, "tno.quantum.utils.BitVector.__eq__"]], "__getitem__() (tno.quantum.utils.basearguments method)": [[24, "tno.quantum.utils.BaseArguments.__getitem__"]], "__getitem__() (tno.quantum.utils.bitvector method)": [[24, "tno.quantum.utils.BitVector.__getitem__"]], "__hash__() (tno.quantum.utils.bitvector method)": [[24, "tno.quantum.utils.BitVector.__hash__"]], "__init__() (tno.quantum.utils.backendconfig method)": [[24, "tno.quantum.utils.BackendConfig.__init__"]], "__init__() (tno.quantum.utils.baseconfig method)": [[24, "tno.quantum.utils.BaseConfig.__init__"]], "__init__() (tno.quantum.utils.bitvector method)": [[24, "tno.quantum.utils.BitVector.__init__"]], "__init__() (tno.quantum.utils.optimizerconfig method)": [[24, "tno.quantum.utils.OptimizerConfig.__init__"]], "__iter__() (tno.quantum.utils.basearguments method)": [[24, "tno.quantum.utils.BaseArguments.__iter__"]], "__iter__() (tno.quantum.utils.bitvector method)": [[24, "tno.quantum.utils.BitVector.__iter__"]], "__len__() (tno.quantum.utils.basearguments method)": [[24, "tno.quantum.utils.BaseArguments.__len__"]], "__len__() (tno.quantum.utils.bitvector method)": [[24, "tno.quantum.utils.BitVector.__len__"]], "__repr__() (tno.quantum.utils.bitvector method)": [[24, "tno.quantum.utils.BitVector.__repr__"]], "__str__() (tno.quantum.utils.bitvector method)": [[24, "tno.quantum.utils.BitVector.__str__"]], "bits (tno.quantum.utils.bitvector property)": [[24, "tno.quantum.utils.BitVector.bits"]], "concatenate() (tno.quantum.utils.bitvector method)": [[24, "tno.quantum.utils.BitVector.concatenate"]], "concatenate_bit_vectors() (tno.quantum.utils.bitvector class method)": [[24, "tno.quantum.utils.BitVector.concatenate_bit_vectors"]], "convert_to_snake_case() (in module tno.quantum.utils)": [[24, "tno.quantum.utils.convert_to_snake_case"]], "flip_indices() (tno.quantum.utils.bitvector method)": [[24, "tno.quantum.utils.BitVector.flip_indices"]], "from_mapping() (tno.quantum.utils.basearguments class method)": [[24, "tno.quantum.utils.BaseArguments.from_mapping"]], "get_installed_subclasses() (in module tno.quantum.utils)": [[24, "tno.quantum.utils.get_installed_subclasses"]], "get_instance() (tno.quantum.utils.baseconfig method)": [[24, "tno.quantum.utils.BaseConfig.get_instance"]], "name (tno.quantum.utils.baseconfig property)": [[24, "tno.quantum.utils.BaseConfig.name"]], "options (tno.quantum.utils.baseconfig property)": [[24, "tno.quantum.utils.BaseConfig.options"]], "prefix() (tno.quantum.utils.baseconfig class method)": [[24, "tno.quantum.utils.BaseConfig.prefix"]], "register_custom_item() (tno.quantum.utils.baseconfig class method)": [[24, "tno.quantum.utils.BaseConfig.register_custom_item"]], "supported_custom_items() (tno.quantum.utils.baseconfig class method)": [[24, "tno.quantum.utils.BaseConfig.supported_custom_items"]], "supported_items() (tno.quantum.utils.backendconfig static method)": [[24, "tno.quantum.utils.BackendConfig.supported_items"]], "supported_items() (tno.quantum.utils.baseconfig static method)": [[24, "tno.quantum.utils.BaseConfig.supported_items"]], "supported_items() (tno.quantum.utils.optimizerconfig static method)": [[24, "tno.quantum.utils.OptimizerConfig.supported_items"]], "tno.quantum.utils": [[24, "module-tno.quantum.utils"]], "to_ising() (tno.quantum.utils.bitvector method)": [[24, "tno.quantum.utils.BitVector.to_ising"]], "serializable (class in tno.quantum.utils.serialization)": [[25, "tno.quantum.utils.serialization.Serializable"]], "check_serializable() (in module tno.quantum.utils.serialization)": [[25, "tno.quantum.utils.serialization.check_serializable"]], "deserialize() (tno.quantum.utils.serialization.serializable static method)": [[25, "tno.quantum.utils.serialization.Serializable.deserialize"]], "from_json() (tno.quantum.utils.serialization.serializable class method)": [[25, "tno.quantum.utils.serialization.Serializable.from_json"]], "from_json_file() (tno.quantum.utils.serialization.serializable class method)": [[25, "tno.quantum.utils.serialization.Serializable.from_json_file"]], "from_yaml() (tno.quantum.utils.serialization.serializable class method)": [[25, "tno.quantum.utils.serialization.Serializable.from_yaml"]], "from_yaml_file() (tno.quantum.utils.serialization.serializable class method)": [[25, "tno.quantum.utils.serialization.Serializable.from_yaml_file"]], "register() (tno.quantum.utils.serialization.serializable static method)": [[25, "tno.quantum.utils.serialization.Serializable.register"]], "serialize() (tno.quantum.utils.serialization.serializable method)": [[25, "tno.quantum.utils.serialization.Serializable.serialize"]], "tno.quantum.utils.serialization": [[25, "module-tno.quantum.utils.serialization"]], "to_json() (tno.quantum.utils.serialization.serializable method)": [[25, "tno.quantum.utils.serialization.Serializable.to_json"]], "to_json_file() (tno.quantum.utils.serialization.serializable method)": [[25, "tno.quantum.utils.serialization.Serializable.to_json_file"]], "to_yaml() (tno.quantum.utils.serialization.serializable method)": [[25, "tno.quantum.utils.serialization.Serializable.to_yaml"]], "to_yaml_file() (tno.quantum.utils.serialization.serializable method)": [[25, "tno.quantum.utils.serialization.Serializable.to_yaml_file"]], "check_arraylike() (in module tno.quantum.utils.validation)": [[26, "tno.quantum.utils.validation.check_arraylike"]], "check_ax() (in module tno.quantum.utils.validation)": [[26, "tno.quantum.utils.validation.check_ax"]], "check_binary() (in module tno.quantum.utils.validation)": [[26, "tno.quantum.utils.validation.check_binary"]], "check_bool() (in module tno.quantum.utils.validation)": [[26, "tno.quantum.utils.validation.check_bool"]], "check_instance() (in module tno.quantum.utils.validation)": [[26, "tno.quantum.utils.validation.check_instance"]], "check_int() (in module tno.quantum.utils.validation)": [[26, "tno.quantum.utils.validation.check_int"]], "check_kwarglike() (in module tno.quantum.utils.validation)": [[26, "tno.quantum.utils.validation.check_kwarglike"]], "check_lower_bound() (in module tno.quantum.utils.validation)": [[26, "tno.quantum.utils.validation.check_lower_bound"]], "check_path() (in module tno.quantum.utils.validation)": [[26, "tno.quantum.utils.validation.check_path"]], "check_python_variable() (in module tno.quantum.utils.validation)": [[26, "tno.quantum.utils.validation.check_python_variable"]], "check_random_state() (in module tno.quantum.utils.validation)": [[26, "tno.quantum.utils.validation.check_random_state"]], "check_real() (in module tno.quantum.utils.validation)": [[26, "tno.quantum.utils.validation.check_real"]], "check_snake_case() (in module tno.quantum.utils.validation)": [[26, "tno.quantum.utils.validation.check_snake_case"]], "check_string() (in module tno.quantum.utils.validation)": [[26, "tno.quantum.utils.validation.check_string"]], "check_timedelta() (in module tno.quantum.utils.validation)": [[26, "tno.quantum.utils.validation.check_timedelta"]], "check_upper_bound() (in module tno.quantum.utils.validation)": [[26, "tno.quantum.utils.validation.check_upper_bound"]], "tno.quantum.utils.validation": [[26, "module-tno.quantum.utils.validation"]], "warn_if_negative() (in module tno.quantum.utils.validation)": [[26, "tno.quantum.utils.validation.warn_if_negative"]], "warn_if_positive() (in module tno.quantum.utils.validation)": [[26, "tno.quantum.utils.validation.warn_if_positive"]], "portfoliodata (class in tno.quantum.problems.portfolio_optimization)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioData"]], "portfoliooptimizer (class in tno.quantum.problems.portfolio_optimization)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioOptimizer"]], "qubofactory (class in tno.quantum.problems.portfolio_optimization)": [[27, "tno.quantum.problems.portfolio_optimization.QuboFactory"]], "__contains__() (tno.quantum.problems.portfolio_optimization.portfoliodata method)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioData.__contains__"]], "__init__() (tno.quantum.problems.portfolio_optimization.portfoliodata method)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioData.__init__"]], "__init__() (tno.quantum.problems.portfolio_optimization.portfoliooptimizer method)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioOptimizer.__init__"]], "__init__() (tno.quantum.problems.portfolio_optimization.qubofactory method)": [[27, "tno.quantum.problems.portfolio_optimization.QuboFactory.__init__"]], "__len__() (tno.quantum.problems.portfolio_optimization.portfoliodata method)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioData.__len__"]], "__repr__() (tno.quantum.problems.portfolio_optimization.portfoliodata method)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioData.__repr__"]], "__str__() (tno.quantum.problems.portfolio_optimization.portfoliodata method)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioData.__str__"]], "add_emission_constraint() (tno.quantum.problems.portfolio_optimization.portfoliooptimizer method)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioOptimizer.add_emission_constraint"]], "add_growth_factor_constraint() (tno.quantum.problems.portfolio_optimization.portfoliooptimizer method)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioOptimizer.add_growth_factor_constraint"]], "add_maximize_roc() (tno.quantum.problems.portfolio_optimization.portfoliooptimizer method)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioOptimizer.add_maximize_roc"]], "add_minimize_hhi() (tno.quantum.problems.portfolio_optimization.portfoliooptimizer method)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioOptimizer.add_minimize_hhi"]], "calc_emission_constraint() (tno.quantum.problems.portfolio_optimization.qubofactory method)": [[27, "tno.quantum.problems.portfolio_optimization.QuboFactory.calc_emission_constraint"]], "calc_growth_factor_constraint() (tno.quantum.problems.portfolio_optimization.qubofactory method)": [[27, "tno.quantum.problems.portfolio_optimization.QuboFactory.calc_growth_factor_constraint"]], "calc_maximize_roc1() (tno.quantum.problems.portfolio_optimization.qubofactory method)": [[27, "tno.quantum.problems.portfolio_optimization.QuboFactory.calc_maximize_roc1"]], "calc_maximize_roc2() (tno.quantum.problems.portfolio_optimization.qubofactory method)": [[27, "tno.quantum.problems.portfolio_optimization.QuboFactory.calc_maximize_roc2"]], "calc_minimize_hhi() (tno.quantum.problems.portfolio_optimization.qubofactory method)": [[27, "tno.quantum.problems.portfolio_optimization.QuboFactory.calc_minimize_hhi"]], "calc_stabilize_c() (tno.quantum.problems.portfolio_optimization.qubofactory method)": [[27, "tno.quantum.problems.portfolio_optimization.QuboFactory.calc_stabilize_c"]], "from_file() (tno.quantum.problems.portfolio_optimization.portfoliodata class method)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioData.from_file"]], "get_capital() (tno.quantum.problems.portfolio_optimization.portfoliodata method)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioData.get_capital"]], "get_column() (tno.quantum.problems.portfolio_optimization.portfoliodata method)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioData.get_column"]], "get_income() (tno.quantum.problems.portfolio_optimization.portfoliodata method)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioData.get_income"]], "get_l_bound() (tno.quantum.problems.portfolio_optimization.portfoliodata method)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioData.get_l_bound"]], "get_outstanding_now() (tno.quantum.problems.portfolio_optimization.portfoliodata method)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioData.get_outstanding_now"]], "get_returns() (tno.quantum.problems.portfolio_optimization.portfoliodata method)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioData.get_returns"]], "get_u_bound() (tno.quantum.problems.portfolio_optimization.portfoliodata method)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioData.get_u_bound"]], "plot_front() (in module tno.quantum.problems.portfolio_optimization)": [[27, "tno.quantum.problems.portfolio_optimization.plot_front"]], "plot_points() (in module tno.quantum.problems.portfolio_optimization)": [[27, "tno.quantum.problems.portfolio_optimization.plot_points"]], "print_portfolio_info() (tno.quantum.problems.portfolio_optimization.portfoliodata method)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioData.print_portfolio_info"]], "run() (tno.quantum.problems.portfolio_optimization.portfoliooptimizer method)": [[27, "tno.quantum.problems.portfolio_optimization.PortfolioOptimizer.run"]], "tno.quantum.problems.portfolio_optimization": [[27, "module-tno.quantum.problems.portfolio_optimization"]]}})